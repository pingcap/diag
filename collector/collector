#!/usr/bin/env python
# coding:utf8

import os
import argparse
import json

from groups import OpGroup, Op, setup_op_groups


def do(op):
    op.do()


def collect(group):
    map(do, group)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--instance-id", type=str,
                        required=True, help="instance identity")
    parser.add_argument("--inspection-id", type=str,
                        required=True, help="inspection identity")
    parser.add_argument("--data-dir", type=str,
                        required=True, help="data directory")
    parser.add_argument("--topology", type=str,
                        required=True, help="topology.json")
    parser.add_argument("--collect", type=str,
                        required=True, help="items to collect")
    parser.add_argument("--log-dir", type=str,
                        required=False, help="location of the slow log")
    parser.add_argument("--log-spliter", type=str,
                        required=False, help="path of the log spliter")
    parser.add_argument("--begin", type=str,
                        required=False, help="begin time of the log range in RFC3339 format")
    parser.add_argument("--end", type=str,
                        required=False, help="end time of the log range in RFC3339 format")

    args = parser.parse_args()

    topology = json.load(open(args.topology))
    groups = setup_op_groups(topology, args)

    status = {}
    map(do, groups['_setup'])
    items = map(lambda x: x.split(':'), args.collect.split(','))
    for item in items:
        try:
            if item[0] == "basic":
                collect(groups['basic'])
            elif item[0] == "profile":
                collect(groups['profile'])
            elif item[0] == "dbinfo":
                collect(groups['dbinfo'])
            elif item[0] == "metric":
                collect(groups['metric'])
            elif item[0] == "config":
                collect(groups['config'])
            elif item[0] == "log":
                collect(groups['log'])
            status[item[0]] = {"status": "success"}
        except Exception as e:
            status[item[0]] = {"status": "error", "message": str(e)}
    map(do, groups['_teardown'])
    with open(os.path.join(args.data_dir,
                           args.inspection_id,
                           'status.json'), "w") as f:
        json.dump(status, f)


if __name__ == "__main__":
    main()
