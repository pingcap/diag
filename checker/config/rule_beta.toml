[[rule]]
id = 7
name = "tikv-log-level"
description = "日志等级。可选值：\"trace\"，\"debug\"，\"info\"，\"warning\"，\"error\"，\"critical\"。默认值：\"info\""
variation =  "TikvConfig.log-level"
check_type = "config"
execute_rule = """
rule "tikv-log-level" "log level of tikv"  salience 6
begin
    if ToString(TikvConfig.GetValueByTagPath("log-level")) == "debug" || ToString(TikvConfig.GetValueByTagPath("log-level")) == "trace" {
        return false
    } else {
        return true
    }
end
"""
name_struct = "TikvConfig"
expect_res = "https://s.tidb.io/rwu7f0ra"
warn_level = "info"
version = ""

# todo check if TiFlash exist
[[rule]]
id = 8
name = "gc.enable-compaction-filter"
description = "是否开启 GC in Compaction Filter 特性"
variation =  "TikvConfig.gc.enable-compaction-filter"
check_type = "config"
execute_rule = """
rule "gc.enable-compaction-filter"
begin
    if ToBool(TikvConfig.GetValueByTagPath("gc.enable-compaction-filter")) == true && TikvConfig.Extra.TiFlashCnt > 0 {
        return false
    } else {
        return true
    }
end
"""
name_struct = "TikvConfig"
expect_res = "https://s.tidb.io/keg6gmsv"
warn_level = "warning"
version = "v5.0.0||v5.0.1"

[[rule]]
id = 9
name = "tikv-log-level"
description = "日志等级。可选值：\"trace\"，\"debug\"，\"info\"，\"warning\"，\"error\"，\"critical\"。默认值：\"info\""
variation =  "TikvConfig.log.level"
check_type = "config"
execute_rule = """
rule "tikv-log-level"
begin
    if ToString(TikvConfig.GetValueByTagPath("log.level")) == "debug" || ToString(TikvConfig.GetValueByTagPath("log.level")) == "trace" {
        return false
    } else {
        return true
    }
end
"""
name_struct = "TikvConfig"
expect_res = "https://s.tidb.io/rwu7f0ra"
warn_level = "info"
version = ">= v5.4.0"

[[rule]]
id = 100
name = "tidb-max-days"
description = "日志保留的最长天数"
variation =  "TidbConfig.log.file.max-days"
check_type = "config"
execute_rule = """
rule "tidb-max-days"
begin
    if ToInt(TidbConfig.GetValueByTagPath("log.file.max-days")) < 1 {
        return false
    } else {
        return true
    }
end
"""
name_struct = "TidbConfig"
expect_res = "https://s.tidb.io/msmo6awg"
warn_level = "warning"
version = ""

[[rule]]
id = 101
name = "tidb-max-backups"
description = "日志文件保留的最大个数"
variation = "TidbConfig.log.file.max-backups"
check_type = "config"
execute_rule = """
rule "tidb-max-backups"
begin
    if ToInt(TidbConfig.GetValueByTagPath("log.file.max-backups")) < 1 {
        return false
    } else {
        return true
    }
end
"""
name_struct = "TidbConfig"
expect_res = "https://s.tidb.io/8bobfejh"
warn_level = "warning"
version = ""

[[rule]]
id = 102
name = "tidb-log-level"
description = "日志等级。可选值：\"trace\"，\"debug\"，\"info\"，\"warning\"，\"error\"，\"critical\"。默认值：\"info\""
variation = "TidbConfig.log.level"
check_type = "config"
execute_rule = """
rule "tidb-log-level"
begin
    if ToString(TidbConfig.GetValueByTagPath("log.level")) == "debug" {
        return false
    } else {
        return true
    }
end
"""
name_struct = "TidbConfig"
expect_res = "https://s.tidb.io/hsaegivp"
warn_level = "info"
version = ""

[[rule]]
id = 103
name = "tidb-enable-streaming"
description = "3.0.20, 4.0.9, 5.2.0 已废弃"
variation = "TidbConfig.enable-streaming"
check_type = "config"
execute_rule = """
rule "tidb-enable-streaming"
begin
    if ToBool(TidbConfig.GetValueByTagPath("enable-streaming")) == true {
        return false
    } else {
        return true
    }
end
"""
name_struct = "TidbConfig"
expect_res = "https://s.tidb.io/4gss70fk"
warn_level = "info"
version = ""

[[rule]]
id = 200
name = "pdconfig-max-snapshot-count"
description = "控制单个 store 最多同时接收或发送的 snapshot 数量，调度受制于这个配置来防止抢占正常业务的资源。"
variation = "PdConfig.schedule.max-snapshot-count"
check_type = "config"
execute_rule = """
rule "pdconfig-max-snapshot-count"
begin
    if ToInt(PdConfig.GetValueByTagPath("schedule.max-snapshot-count")) <= 0 {
        return false
    } else {
        return true
    }
end
"""
name_struct = "PdConfig"
expect_res = "https://s.tidb.io/xhsd706u"
warn_level = "info"
version = ">= v4.0.0"

[[rule]]
id = 201
name = "pdconfig-max-pending-peer-count"
description = "控制单个 store 的 pending peer 上限，调度受制于这个配置来防止在部分节点产生大量日志落后的 Region。"
variation = "PdConfig.schedule.max-pending-peer-count"
check_type = "config"
execute_rule = """
rule "pdconfig-max-pending-peer-count"
begin
    if ToInt(PdConfig.GetValueByTagPath("schedule.max-pending-peer-count")) <= 0 {
        return false
    } else {
        return true
    }
end
"""
name_struct = "PdConfig"
expect_res = "https://s.tidb.io/yfjhx9g8"
warn_level = "info"
version = ">= v4.0.0"

[[rule]]
id = 202
name = "pdconfig-leader-schedule-limit"
description = "同时进行 leader 调度的任务个数。"
variation = "PdConfig.schedule.leader-schedule-limit"
check_type = "config"
execute_rule = """
rule "pdconfig-leader-schedule-limit"
begin
    if ToInt(PdConfig.GetValueByTagPath("schedule.leader-schedule-limit")) <= 0 {
        return false
    } else {
        return true
    }
end
"""
name_struct = "PdConfig"
expect_res = "https://s.tidb.io/3bfdqiy2"
warn_level = "info"
version = ">= v4.0.0"

[[rule]]
id = 203
name = "pdconfig-replica-schedule-limit-a"
description = "同时进行 replica 调度的任务个数。"
variation =  "PdConfig.schedule.replica-schedule-limit"
check_type = "config"
execute_rule = """
rule "pdconfig-replica-schedule-limit-a"
begin
    if ToInt(PdConfig.GetValueByTagPath("schedule.replica-schedule-limit")) <= 0
       || ToInt(PdConfig.GetValueByTagPath("schedule.replica-schedule-limit")) > 64 {
        return false
    } else {
        return true
    }
end
"""
name_struct = "PdConfig"
expect_res = "https://s.tidb.io/ykcvp9zj"
warn_level = "info"
version = ">= v4.0.0"

[[rule]]
id = 204
name = "pdconfig-merge-schedule-limit"
description = "同时进行的 Region Merge 调度的任务，设置为 0 则关闭 Region Merge。"
variation = "PdConfig.schedule.merge-schedule-limit"
check_type = "config"
execute_rule = """
rule "pdconfig-merge-schedule-limit"
begin
    if ToInt(PdConfig.GetValueByTagPath("schedule.merge-schedule-limit")) <= 0
       || ToInt(PdConfig.GetValueByTagPath("schedule.merge-schedule-limit")) > 16 {
        return false
    } else {
        return true
    }
end
"""
name_struct = "PdConfig"
expect_res = "https://s.tidb.io/vkh414nn"
warn_level = "info"
version = ">= v4.0.0"

[[rule]]
id = 205
name = "pdconfig-hot-region-schedule-limit"
description = "控制同时进行的 hot Region 任务。该配置项独立于 Region 调度。"
variation = "PdConfig.schedule.hot-region-schedule-limit"
check_type = "config"
execute_rule = """
rule "pdconfig-hot-region-schedule-limit"
begin
    if ToInt(PdConfig.GetValueByTagPath("schedule.hot-region-schedule-limit")) <= 0
       || ToInt(PdConfig.GetValueByTagPath("schedule.hot-region-schedule-limit")) > 8 {
        return false
    } else {
        return true
    }
end
"""
name_struct = "PdConfig"
expect_res = "https://s.tidb.io/xquk9z2e"
warn_level = "info"
version = ">= v4.0.0"

# todo add store limit rule

[[rule]]
id = 206
name = "pdconfig-store limit-n-add-peer"
description = "Store Limit 限制的主要是 operator 的消费速度，{n} 指 store id，这里对所有 store limit 都有同样的限制。"
variation = "PdConfig.schedule.store-limit"
check_type = "config"
execute_rule = """
rule "pdconfig-store limit-n-add-peer"
begin
    if ElemInRange(FlatMap(PdConfig.GetValueByTagPath("schedule.store-limit"),"add-peer"),0, 100) {
        return true
    }else {
        return false
    }
end
"""
name_struct = "PdConfig"
expect_res = "https://s.tidb.io/8sxavsez"
warn_level = "info"
version = ">= v4.0.0"

[[rule]]
id = 206
name = "pdconfig-store limit-n-remove-peer"
description = "Store Limit 限制的主要是 operator 的消费速度，{n} 指 store id，这里对所有 store limit 都有同样的限制。"
variation = "PdConfig.schedule.store-limit"
check_type = "config"
execute_rule = """
rule "pdconfig-store limit-n-remove-peer"
begin
    if ElemInRange(FlatMap(PdConfig.GetValueByTagPath("schedule.store-limit"),"remove-peer"),0, 100) {
        return true
    }else {
        return false
    }
end
"""
name_struct = "PdConfig"
expect_res = "https://s.tidb.io/8sxavsez"
warn_level = "info"
version = ">= v4.0.0"

[[rule]]
id = 208
name = "pdconfig-replica-schedule-limit-b"
description = "用来控制 replica 相关 operator 的产生速度（涉及到下线、补副本的操作都与该参数有关）。"
variation = "PdConfig.schedule.replica-schedule-limit,PdConfig.schedule.region-schedule-limit"
check_type = "config"
execute_rule = """
rule "pdconfig-replica-schedule-limit-b"
begin
    if ToInt(PdConfig.GetValueByTagPath("schedule.replica-schedule-limit"))
        > ToInt(PdConfig.GetValueByTagPath("schedule.region-schedule-limit")) {
        return false
    } else {
        return true
    }
end
"""
name_struct = "PdConfig"
expect_res = "https://s.tidb.io/slvz6mrn"
warn_level = "warning"
version = ">= v4.0.0"

[[rule]]
id = 209
name = "pdconfig-max-days"
description = "日志保留的最长天数。"
variation = "PdConfig.log.file.max-days"
check_type = "config"
execute_rule = """
rule "pdconfig-max-days"
begin
    if ToInt(PdConfig.GetValueByTagPath("log.file.max-days")) <= 0 {
        return false
    } else {
        return true
    }
end
"""
name_struct = "PdConfig"
expect_res = "https://s.tidb.io/jkdqxudq"
warn_level = "warning"
version = ">= v4.0.0"

[[rule]]
id = 210
name = "pdconfig-max-backups"
description = "日志文件保留的最大个数。"
variation = "PdConfig.log.file.max-backups"
check_type = "config"
execute_rule = """
rule "pdconfig-max-backups"
begin
    if ToInt(PdConfig.GetValueByTagPath("log.file.max-backups")) <= 0 {
        return false
    } else {
        return true
    }
end
"""
name_struct = "PdConfig"
expect_res = "https://s.tidb.io/brd9zy53"
warn_level = "warning"
version = ">= v4.0.0"

[[rule]]
id = 211
name = "pdconfig-log-level"
description = "Log 级别。默认：\"info\" 我们能选择 debug, info, warn, error 或者 fatal。"
variation = "PdConfig.log.level"
check_type = "config"
execute_rule = """
rule "pdconfig-log-level"
begin
    if ToString(PdConfig.GetValueByTagPath("log.level")) == "debug" {
        return false
    } else {
        return true
    }
end
"""
name_struct = "PdConfig"
expect_res = "https://s.tidb.io/81f52ii1"
warn_level = "info"
version = ">= v4.0.0"

[[rule]]
id = 300
name = "poor_effective_plan"
description = "执行计划选择了错误的索引"
variation = "plan_process_time"
check_type = "performance"
execute_rule = """
rule "poor_effective_plan"
begin
    count := 0
    forRange digest := dashboard.ExecutionPlanInfoList {
        ei = dashboard.ExecutionPlanInfoList[digest]
        maxExecutionInfo = dashboard.ExecutionPlanInfoList[0]
        minExecutionInfo = dashboard.ExecutionPlanInfoList[1]
        if !isNil(maxExecutionInfo)
            && !isNil(minExecutionInfo)
            && maxExecutionInfo.AvgProcessTime > 50 * minExecutionInfo.AvgProcessTime
            && maxExecutionInfo.MaxLastTime > minExecutionInfo.MaxLastTime {
            count = count + 1
        }
    }
    return count
end
"""
name_struct = "performance.dashboard"
expect_res = ""   #
warn_level = "warning"
version = ">= v4.0.0"

[[rule]]
id = 301
name = "old_version_count"
description = ""
variation = "total_key,process_key"
check_type = "performance"
execute_rule = """
rule "old_version_count"
begin
    if dashboard.OldVersionProcesskey.Count > 0 && dashboard.OldVersionProcesskey.GcLifeTime > 10 * 60 {
        return false
    }
    return true
end
"""
name_struct = "performance.dashboard"
expect_res = ""   #
warn_level = "warning"
version = ">= v4.0.0"

[[rule]]
id = 302
name = "scan_key_skip"  # todo check
description = ""
variation = "rocksdb_delete_skipped_count,process_keys"
check_type = "performance"
execute_rule = """
rule "scan_key_skip"
begin
    if dashboard.TombStoneStatistics.Count > 0 {
        return false
    }
    return true
end
"""
name_struct = "performance.dashboard"
expect_res = ""   #
warn_level = "info"
version = ">= v4.0.0"

[[rule]]
id = 104
name = "new_collations_enabled_on_first_bootstrap"
description = "用于开启新的 collation 支持。"
variation =  "TidbConfig.new_collations_enabled_on_first_bootstrap"
execute_rule = """
rule "new_collations_enabled_on_first_bootstrap"
begin
    if ToBool(TidbConfig.GetValueByTagPath("new_collations_enabled_on_first_bootstrap")) == true {
        return false
    } else {
        return true
    }
end
"""
name_struct = "TidbConfig"
check_type = "config"
expect_res = "https://s.tidb.io/8q1yppzm"
warn_level = "warning"
version = ">=v4.0.0,<v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.1.0||v5.1.1||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0"

[[rule]]
id = 105
name = "feedback-probability"
description = "TiDB 对查询收集统计信息反馈的概率,此功能默认关闭，暂不建议开启。如果开启此功能，对于每一个查询，TiDB 会以 feedback-probability 的概率收集查询的反馈，用于更新统计信息。"
variation =  "TidbConfig.performance.feedback-probability"
execute_rule = """
rule "feedback-probability"
begin
    if ToFloat(TidbConfig.GetValueByTagPath("performance.feedback-probability")) > 0 {
        return false
    } else {
        return true
    }
end
"""
name_struct = "TidbConfig"
check_type = "config"
expect_res = "https://s.tidb.io/wvuoe8f4"
warn_level = "warning"
version = ""

[[rule]]
id = 212
name = "flow-round-by-digit"
description = "PD 会对流量信息的末尾数字进行四舍五入处理，减少 Region 流量信息变化引起的统计信息更新。"
variation =  "PdConfig.pd-server.flow-round-by-digit"
execute_rule = """
rule "flow-round-by-digit"
begin
    if ToInt(PdConfig.GetValueByTagPath("pd-server.flow-round-by-digit")) == 127 {
        return false
    } else {
        return true
    }
end
"""
name_struct = "PdConfig"
check_type = "config"
expect_res = "https://s.tidb.io/z26bgtcp"
warn_level = "info"
version = ">= v5.1.0"

[[rule]]
id = 213
name = "trace-region-flow"
description = "在5.1版本开始该配置被 flow-round-by-digit 替换。"
variation =  "PdConfig.pd-server.trace-region-flow"
execute_rule = """
rule "trace-region-flow"
begin
    if ToBool(PdConfig.GetValueByTagPath("pd-server.trace-region-flow")) == false {
        return false
    } else {
        return true
    }
end
"""
name_struct = "PdConfig"
check_type = "config"
expect_res = "https://s.tidb.io/29f66p8d"
warn_level = "info"
version = ">= v4.0.0,<= v4.0.15"

[[rule]]
id = 214
name = "strictly-match-label"
description = "打开强制 TiKV Label 和 PD 的 location-labels 是否匹配的检查。"
variation =  "PdConfig.replication.strictly-match-label"
execute_rule = """
rule "strictly-match-label"
begin
    if ToBool(PdConfig.GetValueByTagPath("replication.strictly-match-label")) == true {
        return false
    } else {
        return true
    }
end
"""
name_struct = "PdConfig"
check_type = "config"
expect_res = "https://s.tidb.io/6pwz5mk4"
warn_level = "warning"
version = ""

[[rule]]
id = 215
name = "max-replicas"
description = "打开强制 TiKV Label 和 PD 的 location-labels 是否匹配的检查。"
variation =  "PdConfig.replication.max-replicas"
execute_rule = """
rule "max-replicas"
begin
    if ToInt(PdConfig.GetValueByTagPath("replication.max-replicas")) < 3 {
        return false
    } else {
        return true
    }
end
"""
name_struct = "PdConfig"
check_type = "config"
expect_res = "https://s.tidb.io/36kjtpll"
warn_level = "warning"
version = ""

[[rule]]
id = 1009
name = 'PdConfig.lease'
description = 'PD Leader Key 租约超时时间，超时系统重新选举 Leader，单位：秒'
variation = 'PdConfig.lease'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.lease"
begin
    if ToString(PdConfig.GetValueByTagPath("lease")) == "3" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '3'

[[rule]]
id = 1010
name = 'PdConfig.quota-backend-bytes'
description = '元信息数据库存储空间的大小，默认 8GiB。'
variation = 'PdConfig.quota-backend-bytes'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.quota-backend-bytes"
begin
    if MustCmpReadableSize(ToString(PdConfig.GetValueByTagPath("quota-backend-bytes")), "8GiB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '8589934592'

[[rule]]
id = 1011
name = 'PdConfig.auto-compaction-mode'
description = '元信息数据库自动压缩的模式，可选项为 periodic（按周期），revision（按版本数）。'
variation = 'PdConfig.auto-compaction-mode'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.auto-compaction-mode"
begin
    if ToString(PdConfig.GetValueByTagPath("auto-compaction-mode")) == "periodic" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'periodic'

[[rule]]
id = 1012
name = 'PdConfig.auto-compaction-retention-v2'
description = 'compaction-mode 为 periodic 时为元信息数据库自动压缩的间隔时间；compaction-mode 设置为 revision 时为自动压缩的版本数。'
variation = 'PdConfig.auto-compaction-retention-v2'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.auto-compaction-retention-v2"
begin
    if MustCmpDuration(ToString(PdConfig.GetValueByTagPath("auto-compaction-retention-v2")),"1h")==0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1h'

[[rule]]
id = 1013
name = 'PdConfig.force-new-cluster'
description = '强制让该 PD 以一个新集群启动，且修改 raft 成员数为 1。'
variation = 'PdConfig.force-new-cluster'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.force-new-cluster"
begin
    if ToBool(PdConfig.GetValueByTagPath("force-new-cluster")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 1017
name = 'PdConfig.security.redact-info-log'
description = '控制 PD 日志脱敏的开关 '
variation = 'PdConfig.security.redact-info-log'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.security.redact-info-log"
begin
    if ToBool(PdConfig.GetValueByTagPath("security.redact-info-log")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 1018
name = 'PdConfig.log.format'
description = '日志格式，可指定为 "text"，"json"， "console"。'
variation = 'PdConfig.log.format'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.log.format"
begin
    if ToString(PdConfig.GetValueByTagPath("log.format")) == "text" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'text'

[[rule]]
id = 1019
name = 'PdConfig.log.disable-timestamp'
description = '是否禁用日志中自动生成的时间戳。'
variation = 'PdConfig.log.disable-timestamp'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.log.disable-timestamp"
begin
    if ToBool(PdConfig.GetValueByTagPath("log.disable-timestamp")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 1020
name = 'PdConfig.log.file.max-size'
description = '单个日志文件最大大小，超过该值系统自动切分成多个文件，单位MiB'
variation = 'PdConfig.log.file.max-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.log.file.max-size"
begin
    if ToString(PdConfig.GetValueByTagPath("log.file.max-size")) == "300" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '300'

[[rule]]
id = 1021
name = 'PdConfig.log.file.max-days'
description = '日志保留的最长天数'
variation = 'PdConfig.log.file.max-days'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.log.file.max-days"
begin
    if ToInt(PdConfig.GetValueByTagPath("log.file.max-days")) == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '28'

[[rule]]
id = 1022
name = 'PdConfig.log.file.max-backups'
description = '日志文件保留的最大个数'
variation = 'PdConfig.log.file.max-backups'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.log.file.max-backups"
begin
    if ToInt(PdConfig.GetValueByTagPath("log.file.max-backups")) == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '7'

[[rule]]
id = 1023
name = 'PdConfig.metric.interval'
description = '向 Prometheus 推送监控指标数据的间隔时间。'
variation = 'PdConfig.metric.interval'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.metric.interval"
begin
    if ToString(PdConfig.GetValueByTagPath("metric.interval")) == "15s" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '15'

[[rule]]
id = 1024
name = 'PdConfig.schedule.max-merge-region-size'
description = '控制 Region Merge 的 size 上限，当 Region Size 大于指定值时 PD 不会将其与相邻的 Region 合并。'
variation = 'PdConfig.schedule.max-merge-region-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.max-merge-region-size"
begin
    if ToString(PdConfig.GetValueByTagPath("schedule.max-merge-region-size")) == "20" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '20'

[[rule]]
id = 1025
name = 'PdConfig.schedule.max-merge-region-keys'
description = '控制 Region Merge 的 key 上限，当 Region key 大于指定值时 PD 不会将其与相邻的 Region 合并。'
variation = 'PdConfig.schedule.max-merge-region-keys'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.max-merge-region-keys"
begin
    if ToString(PdConfig.GetValueByTagPath("schedule.max-merge-region-keys")) == "200000" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '200000'

[[rule]]
id = 1026
name = 'PdConfig.schedule.patrol-region-interval'
description = '控制 replicaChecker 检查 Region 健康状态的运行频率，越短则运行越快，通常状况不需要调整'
variation = 'PdConfig.schedule.patrol-region-interval'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.patrol-region-interval"
begin
    if MustCmpDuration(ToString(PdConfig.GetValueByTagPath("schedule.patrol-region-interval")),"100ms")==0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '100ms'

[[rule]]
id = 1027
name = 'PdConfig.schedule.split-merge-interval'
description = '控制对同一个 Region 做 split 和 merge 操作的间隔，即对于新 split 的 Region 一段时间内不会被 merge。'
variation = 'PdConfig.schedule.split-merge-interval'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.split-merge-interval"
begin
    if MustCmpDuration(ToString(PdConfig.GetValueByTagPath("schedule.split-merge-interval")),"1h")==0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1h'

[[rule]]
id = 1028
name = 'PdConfig.schedule.max-snapshot-count'
description = '控制单个 store 最多同时接收或发送的 snapshot 数量，调度受制于这个配置来防止抢占正常业务的资源。'
variation = 'PdConfig.schedule.max-snapshot-count'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.max-snapshot-count"
begin
    if ToString(PdConfig.GetValueByTagPath("schedule.max-snapshot-count")) == "3" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '3'

[[rule]]
id = 1029
name = 'PdConfig.schedule.max-pending-peer-count'
description = '控制单个 store 的 pending peer 上限，调度受制于这个配置来防止在部分节点产生大量日志落后的 Region。'
variation = 'PdConfig.schedule.max-pending-peer-count'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.max-pending-peer-count"
begin
    if ToString(PdConfig.GetValueByTagPath("schedule.max-pending-peer-count")) == "16" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '16'

[[rule]]
id = 1030
name = 'PdConfig.schedule.max-store-down-time'
description = 'PD 认为失联 store 无法恢复的时间，当超过指定的时间没有收到 store 的心跳后，PD 会在其他节点补充副本。'
variation = 'PdConfig.schedule.max-store-down-time'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.max-store-down-time"
begin
    if MustCmpDuration(ToString(PdConfig.GetValueByTagPath("schedule.max-store-down-time")),"30m") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '30m'

[[rule]]
id = 1031
name = 'PdConfig.schedule.leader-schedule-limit'
description = '同时进行 leader 调度的任务个数。'
variation = 'PdConfig.schedule.leader-schedule-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.leader-schedule-limit"
begin
    if ToString(PdConfig.GetValueByTagPath("schedule.leader-schedule-limit")) == "4" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '4'

[[rule]]
id = 1032
name = 'PdConfig.schedule.region-schedule-limit'
description = '同时进行 Region 调度的任务个数'
variation = 'PdConfig.schedule.region-schedule-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.region-schedule-limit"
begin
    if ToString(PdConfig.GetValueByTagPath("schedule.region-schedule-limit")) == "2048" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '2048'

[[rule]]
id = 1033
name = 'PdConfig.schedule.hot-region-schedule-limit'
description = '控制同时进行的 hot Region 任务。该配置项独立于 Region 调度。'
variation = 'PdConfig.schedule.hot-region-schedule-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.hot-region-schedule-limit"
begin
    if ToString(PdConfig.GetValueByTagPath("schedule.hot-region-schedule-limit")) == "4" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '4'

[[rule]]
id = 1034
name = 'PdConfig.schedule.hot-region-cache-hits-threshold'
description = '设置识别热点 Region 所需的分钟数。只有当 Region 处于热点状态持续时间超过此分钟数时，PD 才会参与热点调度。'
variation = 'PdConfig.schedule.hot-region-cache-hits-threshold'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.hot-region-cache-hits-threshold"
begin
    if ToString(PdConfig.GetValueByTagPath("schedule.hot-region-cache-hits-threshold")) == "3" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '3'

[[rule]]
id = 1035
name = 'PdConfig.schedule.replica-schedule-limit'
description = '同时进行 replica 调度的任务个数。'
variation = 'PdConfig.schedule.replica-schedule-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.replica-schedule-limit"
begin
    if ToString(PdConfig.GetValueByTagPath("schedule.replica-schedule-limit")) == "64" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '64'

[[rule]]
id = 1036
name = 'PdConfig.schedule.merge-schedule-limit'
description = '同时进行的 Region Merge 调度的任务，设置为 0 则关闭 Region Merge。'
variation = 'PdConfig.schedule.merge-schedule-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.merge-schedule-limit"
begin
    if ToString(PdConfig.GetValueByTagPath("schedule.merge-schedule-limit")) == "8" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '8'

[[rule]]
id = 1037
name = 'PdConfig.schedule.high-space-ratio'
description = '设置 store 空间充裕的阈值。当节点的空间占用比例小于该阈值时，PD 调度时会忽略节点的剩余空间，主要根据实际数据量进行均衡。此配置仅在 region-score-formula-version = v1 时生效。'
variation = 'PdConfig.schedule.high-space-ratio'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.high-space-ratio"
begin
    if ToString(PdConfig.GetValueByTagPath("schedule.high-space-ratio")) == "0.7" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0.7'

[[rule]]
id = 1038
name = 'PdConfig.schedule.low-space-ratio'
description = '设置 store 空间不足的阈值。当某个节点的空间占用比例超过该阈值时，PD 会尽可能避免往该节点迁移数据，同时主要根据节点剩余空间大小进行调度，避免对应节点的磁盘空间被耗尽。'
variation = 'PdConfig.schedule.low-space-ratio'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.low-space-ratio"
begin
    if ToString(PdConfig.GetValueByTagPath("schedule.low-space-ratio")) == "0.8" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0.8'

[[rule]]
id = 1039
name = 'PdConfig.schedule.tolerant-size-ratio'
description = '控制 balance 缓冲区大小。'
variation = 'PdConfig.schedule.tolerant-size-ratio'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.tolerant-size-ratio"
begin
    if ToString(PdConfig.GetValueByTagPath("schedule.tolerant-size-ratio")) == "0" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0'

[[rule]]
id = 1040
name = 'PdConfig.schedule.enable-cross-table-merge'
description = '设置是否开启跨表 merge。'
variation = 'PdConfig.schedule.enable-cross-table-merge'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.enable-cross-table-merge"
begin
    if ToBool(PdConfig.GetValueByTagPath("schedule.enable-cross-table-merge")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 1041
name = 'PdConfig.schedule.region-score-formula-version'
description = '设置 Region 算分公式版本。可选值：v1，v2'
variation = 'PdConfig.schedule.region-score-formula-version'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.region-score-formula-version"
begin
    if ToString(PdConfig.GetValueByTagPath("schedule.region-score-formula-version")) == "v2" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'v2'

[[rule]]
id = 1042
name = 'PdConfig.schedule.enable-joint-consensus'
description = '是否使用 Joint Consensus 进行副本调度。关闭该特性时，PD 将采用一次调度一个副本的方式进行调度。'
variation = 'PdConfig.schedule.enable-joint-consensus'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.enable-joint-consensus"
begin
    if ToBool(PdConfig.GetValueByTagPath("schedule.enable-joint-consensus")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 1043
name = 'PdConfig.replication.max-replicas'
description = '所有副本数量，即 leader 与 follower 数量之和。默认为 3，即 1 个 leader 和 2 个 follower。'
variation = 'PdConfig.replication.max-replicas'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.replication.max-replicas"
begin
    if ToString(PdConfig.GetValueByTagPath("replication.max-replicas")) == "3" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '3'

[[rule]]
id = 1045
name = 'PdConfig.replication.isolation-level'
description = 'TiKV 集群的最小强制拓扑隔离级别。配置集群拓扑'
variation = 'PdConfig.replication.isolation-level'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.replication.isolation-level"
begin
    if ToString(PdConfig.GetValueByTagPath("replication.isolation-level")) == "" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '""'

[[rule]]
id = 1046
name = 'PdConfig.replication.strictly-match-label'
description = '打开强制 TiKV Label 和 PD 的 location-labels 是否匹配的检查'
variation = 'PdConfig.replication.strictly-match-label'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.replication.strictly-match-label"
begin
    if ToBool(PdConfig.GetValueByTagPath("replication.strictly-match-label")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 1047
name = 'PdConfig.replication.enable-placement-rules'
description = '打开 placement-rules'
variation = 'PdConfig.replication.enable-placement-rules'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.replication.enable-placement-rules"
begin
    if ToBool(PdConfig.GetValueByTagPath("replication.enable-placement-rules")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 1048
name = 'PdConfig.pd-server.flow-round-by-digit'
description = 'PD 会对流量信息的末尾数字进行四舍五入处理，减少 Region 流量信息变化引起的统计信息更新。该配置项用于指定对 Region 流量信息的末尾进行四舍五入的位数。例如流量 100512 会归约到 101000。默认值为 3。该配置替换了 trace-region-flow。'
variation = 'PdConfig.pd-server.flow-round-by-digit'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.pd-server.flow-round-by-digit"
begin
    if ToString(PdConfig.GetValueByTagPath("pd-server.flow-round-by-digit")) == "3" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '3'

#[[rule]]
#id = 1049
#name = 'PdConfig.label-property.reject-leader'
#description = 'store 带有 reject-leader 的 label。'
#variation = 'PdConfig.label-property.reject-leader'
#check_type = 'defaultConfig'
#execute_rule = '''
#rule "PdConfig.label-property.reject-leader"
#begin
#    if Len(PdConfig.GetValueByTagPath("label-property.reject-leader")) > 0 {
#        return true
#    } else {
#        return false
#    }
#end
#'''
#name_struct = 'PdConfig'
#expect_res = ''
#warn_level = 'info'
#version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
#default = ''

[[rule]]
id = 1055
name = 'PdConfig.dashboard.enable-telemetry'
description = '是否启用 TiDB Dashboard 遥测功能。'
variation = 'PdConfig.dashboard.enable-telemetry'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.dashboard.enable-telemetry"
begin
    if ToBool(PdConfig.GetValueByTagPath("dashboard.enable-telemetry")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 1056
name = 'PdConfig.schedule.patrol-region-interval'
description = '控制 replicaChecker 检查 Region 健康状态的运行频率，越短则运行越快，通常状况不需要调整'
variation = 'PdConfig.schedule.patrol-region-interval'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.patrol-region-interval"
begin
    if MustCmpDuration(ToString(PdConfig.GetValueByTagPath("schedule.patrol-region-interval")),"10ms")==0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.3.0'
default = '10ms'

[[rule]]
id = 1057
name = 'PdConfig.schedule.max-snapshot-count'
description = '控制单个 store 最多同时接收或发送的 snapshot 数量，调度受制于这个配置来防止抢占正常业务的资源。'
variation = 'PdConfig.schedule.max-snapshot-count'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.max-snapshot-count"
begin
    if ToString(PdConfig.GetValueByTagPath("schedule.max-snapshot-count")) == "64" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.3.0'
default = '64'

[[rule]]
id = 1058
name = 'PdConfig.schedule.max-pending-peer-count'
description = '控制单个 store 的 pending peer 上限，调度受制于这个配置来防止在部分节点产生大量日志落后的 Region。'
variation = 'PdConfig.schedule.max-pending-peer-count'
check_type = 'defaultConfig'
execute_rule = '''
rule "PdConfig.schedule.max-pending-peer-count"
begin
    if ToString(PdConfig.GetValueByTagPath("schedule.max-pending-peer-count")) == "64" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'PdConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.3.0'
default = '64'

[[rule]]
id = 2000
name = 'TikvConfig.abort-on-panic'
description = '设置 TiKV panic 时是否调用 abort() 退出进程。此选项影响 TiKV 是否允许系统生成 core dump 文件。'
variation = 'TikvConfig.abort-on-panic'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.abort-on-panic"
begin
    if ToBool(TikvConfig.GetValueByTagPath("abort-on-panic")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2001
name = 'TikvConfig.server.max-grpc-send-msg-len'
description = '设置可发送的最大 gRPC 消息长度，单位 Bytes'
variation = 'TikvConfig.server.max-grpc-send-msg-len'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.server.max-grpc-send-msg-len"
begin
    if ToString(TikvConfig.GetValueByTagPath("server.max-grpc-send-msg-len")) == "10485760" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10485760'

[[rule]]
id = 2002
name = 'TikvConfig.server.status-thread-pool-size'
description = 'Http API 服务的工作线程数量。'
variation = 'TikvConfig.server.status-thread-pool-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.server.status-thread-pool-size"
begin
    if ToString(TikvConfig.GetValueByTagPath("server.status-thread-pool-size")) == "1" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1'

[[rule]]
id = 2003
name = 'TikvConfig.server.grpc-compression-type'
description = 'gRPC 消息的压缩算法，取值：none， deflate， gzip。'
variation = 'TikvConfig.server.grpc-compression-type'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.server.grpc-compression-type"
begin
    if ToString(TikvConfig.GetValueByTagPath("server.grpc-compression-type")) == "none" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'none'

[[rule]]
id = 2004
name = 'TikvConfig.server.grpc-concurrency'
description = 'gRPC 工作线程的数量。'
variation = 'TikvConfig.server.grpc-concurrency'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.server.grpc-concurrency"
begin
    if ToString(TikvConfig.GetValueByTagPath("server.grpc-concurrency")) == "5" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '5'

[[rule]]
id = 2005
name = 'TikvConfig.server.grpc-concurrent-stream'
description = '一个 gRPC 链接中最多允许的并发请求数量'
variation = 'TikvConfig.server.grpc-concurrent-stream'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.server.grpc-concurrent-stream"
begin
    if ToString(TikvConfig.GetValueByTagPath("server.grpc-concurrent-stream")) == "1024" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1024'

#[[rule]]
#id = 2006
#name = 'TikvConfig.server.grpc-memory-pool-quota'
#description = 'gRPC 可使用的内存大小限制。'
#variation = 'TikvConfig.server.grpc-memory-pool-quota'
#check_type = 'defaultConfig'
#execute_rule = '''
#rule "TikvConfig.server.grpc-memory-pool-quota"
#begin
#    if ToInt(TikvConfig.GetValueByTagPath("server.grpc-memory-pool-quota")) == 0 {
#        return true
#    } else {
#        return false
#    }
#end
#'''
#name_struct = 'TikvConfig'
#expect_res = ''
#warn_level = 'info'
#version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
#default = '无限制'

[[rule]]
id = 2007
name = 'TikvConfig.server.grpc-raft-conn-num'
description = 'tikv 节点之间用于 raft 通讯的链接最大数量。'
variation = 'TikvConfig.server.grpc-raft-conn-num'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.server.grpc-raft-conn-num"
begin
    if ToString(TikvConfig.GetValueByTagPath("server.grpc-raft-conn-num")) == "1" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1'

[[rule]]
id = 2008
name = 'TikvConfig.server.grpc-stream-initial-window-size'
description = 'gRPC stream 的 window 大小。'
variation = 'TikvConfig.server.grpc-stream-initial-window-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.server.grpc-stream-initial-window-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("server.grpc-stream-initial-window-size")), "2MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '2MB'

[[rule]]
id = 2009
name = 'TikvConfig.server.grpc-keepalive-time'
description = 'gRPC 发送 keep alive ping 消息的间隔时长。'
variation = 'TikvConfig.server.grpc-keepalive-time'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.server.grpc-keepalive-time"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("server.grpc-keepalive-time")), "10s") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10s'

[[rule]]
id = 2010
name = 'TikvConfig.server.grpc-keepalive-timeout'
description = '关闭 gRPC 链接的超时时长。'
variation = 'TikvConfig.server.grpc-keepalive-timeout'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.server.grpc-keepalive-timeout"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("server.grpc-keepalive-timeout")),"3s") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '3s'

[[rule]]
id = 2011
name = 'TikvConfig.server.concurrent-send-snap-limit'
description = '同时发送 snapshot 的最大个数。'
variation = 'TikvConfig.server.concurrent-send-snap-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.server.concurrent-send-snap-limit"
begin
    if ToString(TikvConfig.GetValueByTagPath("server.concurrent-send-snap-limit")) == "32" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '32'

[[rule]]
id = 2012
name = 'TikvConfig.server.concurrent-recv-snap-limit'
description = '同时接受 snapshot 的最大个数。'
variation = 'TikvConfig.server.concurrent-recv-snap-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.server.concurrent-recv-snap-limit"
begin
    if ToString(TikvConfig.GetValueByTagPath("server.concurrent-recv-snap-limit")) == "32" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '32'

[[rule]]
id = 2013
name = 'TikvConfig.server.end-point-recursion-limit'
description = 'endpoint 下推查询请求解码消息时，最多允许的递归层数。'
variation = 'TikvConfig.server.end-point-recursion-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.server.end-point-recursion-limit"
begin
    if ToString(TikvConfig.GetValueByTagPath("server.end-point-recursion-limit")) == "1000" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1000'

[[rule]]
id = 2014
name = 'TikvConfig.server.end-point-request-max-handle-duration'
description = 'endpoint 下推查询请求处理任务最长允许的时长。'
variation = 'TikvConfig.server.end-point-request-max-handle-duration'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.server.end-point-request-max-handle-duration"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("server.end-point-request-max-handle-duration")),"60s") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '60s'

[[rule]]
id = 2015
name = 'TikvConfig.server.snap-max-write-bytes-per-sec'
description = '处理 snapshot 时最大允许使用的磁盘带宽。'
variation = 'TikvConfig.server.snap-max-write-bytes-per-sec'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.server.snap-max-write-bytes-per-sec"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("server.snap-max-write-bytes-per-sec")),"100MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '100MB'

[[rule]]
id = 2016
name = 'TikvConfig.server.end-point-slow-log-threshold'
description = 'endpoint 下推查询请求输出慢日志的阈值，处理时间超过阈值后会输出慢日志。'
variation = 'TikvConfig.server.end-point-slow-log-threshold'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.server.end-point-slow-log-threshold"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("server.end-point-slow-log-threshold")),"1s") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1s'

[[rule]]
id = 2017
name = "TikvConfig.readpool.unified.min-thread-count"
description = '统一处理读请求的线程池最少的线程数量。'
variation = "TikvConfig.readpool.unified.min-thread-count"
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.readpool.unified.min-thread-count"
begin
    if ToString(TikvConfig.GetValueByTagPath("readpool.unified.min-thread-count")) == "1" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1'

[[rule]]
id = 2019
name = "TikvConfig.readpool.unified.stack-size"
description = '统一处理读请求的线程池中线程的栈大小。'
variation = "TikvConfig.readpool.unified.stack-size"
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.readpool.unified.stack-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("readpool.unified.stack-size")),"10MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10MB'

[[rule]]
id = 2020
name = "TikvConfig.readpool.unified.max-tasks-per-worker"
description = '统一处理读请求的线程池中单个线程允许积压的最大任务数量，超出后会返回 Server Is Busy。'
variation = "TikvConfig.readpool.unified.max-tasks-per-worker"
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.readpool.unified.max-tasks-per-worker"
begin
    if ToString(TikvConfig.GetValueByTagPath("readpool.unified.max-tasks-per-worker")) == "2000" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '2000'

#[[rule]]
#id = 2021
#name = 'TikvConfig.readpool.storage.use-unified-pool'
#description = '是否使用统一的读取线程池（在 readpool.unified 中配置）处理存储请求。该选项值为 false 时，使用单独的存储线程池。通过本节 (readpool.storage) 中的其余配置项配置单独的线程池。'
#variation = 'TikvConfig.readpool.storage.use-unified-pool'
#check_type = 'defaultConfig'
#execute_rule = '''
#rule "TikvConfig.readpool.storage.use-unified-pool"
#begin
#    if ToBool(TikvConfig.GetValueByTagPath("readpool.storage.use-unified-pool")) == false {
#        return true
#    } else {
#        return false
#    }
#end
#'''
#name_struct = 'TikvConfig'
#expect_res = ''
#warn_level = 'info'
#version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
#default = '如果本节 (readpool.storage) 中没有其他配置，默认为 true。否则，为了升级兼容性，默认为 false，请根据需要更改 readpool.unified 中的配置后再启用该选项。'

[[rule]]
id = 2025
name = 'TikvConfig.readpool.storage.max-tasks-per-worker-high'
description = '高优先级线程池中单个线程允许积压的最大任务数量，超出后会返回 Server Is Busy。'
variation = 'TikvConfig.readpool.storage.max-tasks-per-worker-high'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.readpool.storage.max-tasks-per-worker-high"
begin
    if ToString(TikvConfig.GetValueByTagPath("readpool.storage.max-tasks-per-worker-high")) == "2000" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '2000'

[[rule]]
id = 2026
name = 'TikvConfig.readpool.storage.max-tasks-per-worker-normal'
description = '普通优先级线程池中单个线程允许积压的最大任务数量，超出后会返回 Server Is Busy。'
variation = 'TikvConfig.readpool.storage.max-tasks-per-worker-normal'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.readpool.storage.max-tasks-per-worker-normal"
begin
    if ToString(TikvConfig.GetValueByTagPath("readpool.storage.max-tasks-per-worker-normal")) == "2000" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '2000'

[[rule]]
id = 2027
name = 'TikvConfig.readpool.storage.max-tasks-per-worker-low'
description = '低优先级线程池中单个线程允许积压的最大任务数量，超出后会返回 Server Is Busy。'
variation = 'TikvConfig.readpool.storage.max-tasks-per-worker-low'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.readpool.storage.max-tasks-per-worker-low"
begin
    if ToString(TikvConfig.GetValueByTagPath("readpool.storage.max-tasks-per-worker-low")) == "2000" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '2000'

[[rule]]
id = 2028
name = 'TikvConfig.readpool.storage.stack-size'
description = 'Storage 读线程池中线程的栈大小。'
variation = 'TikvConfig.readpool.storage.stack-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.readpool.storage.stack-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("readpool.storage.stack-size")),"10MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10MB'

#[[rule]]
#id = 2029
#name = 'TikvConfig.readpool.coprocessor.use-unified-pool'
#description = '是否使用统一的读取线程池（在 readpool.unified 中配置）处理协处理器请求。该选项值为 false 时，使用单独的协处理器线程池。通过本节 (readpool.coprocessor) 中的其余配置项配置单独的线程池。'
#variation = 'TikvConfig.readpool.coprocessor.use-unified-pool'
#check_type = 'defaultConfig'
#execute_rule = '''
#rule "TikvConfig.readpool.coprocessor.use-unified-pool"
#begin
#    if ToBool(TikvConfig.GetValueByTagPath("readpool.coprocessor.use-unified-pool")) == false {
#        return true
#    } else {
#        return false
#    }
#end
#'''
#name_struct = 'TikvConfig'
#expect_res = ''
#warn_level = 'info'
#version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
#default = '如果本节 (readpool.coprocessor) 中没有其他配置，默认为 true。否则，为了升级兼容性，默认为 false，请根据需要更改 readpool.unified 中的配置后再启用该选项。'


[[rule]]
id = 2033
name = 'TikvConfig.readpool.coprocessor.max-tasks-per-worker-high'
description = '高优先级线程池中单个线程允许积压的任务数量，超出后会返回 Server Is Busy。'
variation = 'TikvConfig.readpool.coprocessor.max-tasks-per-worker-high'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.readpool.coprocessor.max-tasks-per-worker-high"
begin
    if ToString(TikvConfig.GetValueByTagPath("readpool.coprocessor.max-tasks-per-worker-high")) == "2000" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '2000'

[[rule]]
id = 2034
name = 'TikvConfig.readpool.coprocessor.max-tasks-per-worker-normal'
description = '普通优先级线程池中单个线程允许积压的任务数量，超出后会返回 Server Is Busy。'
variation = 'TikvConfig.readpool.coprocessor.max-tasks-per-worker-normal'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.readpool.coprocessor.max-tasks-per-worker-normal"
begin
    if ToString(TikvConfig.GetValueByTagPath("readpool.coprocessor.max-tasks-per-worker-normal")) == "2000" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '2000'

[[rule]]
id = 2035
name = 'TikvConfig.readpool.coprocessor.max-tasks-per-worker-low'
description = '低优先级线程池中单个线程允许积压的任务数量，超出后会返回 Server Is Busy。'
variation = 'TikvConfig.readpool.coprocessor.max-tasks-per-worker-low'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.readpool.coprocessor.max-tasks-per-worker-low"
begin
    if ToString(TikvConfig.GetValueByTagPath("readpool.coprocessor.max-tasks-per-worker-low")) == "2000" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '2000'

[[rule]]
id = 2036
name = 'TikvConfig.readpool.coprocessor.stack-size'
description = 'Coprocessor 线程池中线程的栈大小，默认值：10，单位：KiB|MiB|GiB。'
variation = 'TikvConfig.readpool.coprocessor.stack-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.readpool.coprocessor.stack-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("readpool.coprocessor.stack-size")),"10MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10MB'

[[rule]]
id = 2037
name = 'TikvConfig.storage.scheduler-concurrency'
description = 'scheduler 内置一个内存锁机制，防止同时对一个 key 进行操作。每个 key hash 到不同的槽。'
variation = 'TikvConfig.storage.scheduler-concurrency'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.storage.scheduler-concurrency"
begin
    if ToString(TikvConfig.GetValueByTagPath("storage.scheduler-concurrency")) == "524288" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '524288'

[[rule]]
id = 2038
name = 'TikvConfig.storage.scheduler-worker-pool-size'
description = 'scheduler 线程个数，主要负责写入之前的事务一致性检查工作。如果 CPU 核心数量大于等于 16，默认为 8；否则默认为 4。'
variation = 'TikvConfig.storage.scheduler-worker-pool-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.storage.scheduler-worker-pool-size"
begin
    if ToString(TikvConfig.GetValueByTagPath("storage.scheduler-worker-pool-size")) == "4" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '4'

[[rule]]
id = 2039
name = 'TikvConfig.storage.scheduler-pending-write-threshold'
description = '写入数据队列的最大值，超过该值之后对于新的写入 TiKV 会返回 Server Is Busy 错误。'
variation = 'TikvConfig.storage.scheduler-pending-write-threshold'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.storage.scheduler-pending-write-threshold"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("storage.scheduler-pending-write-threshold")),"100MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '100MB'

[[rule]]
id = 2040
name = 'TikvConfig.storage.reserve-space'
description = 'TiKV 启动时预占额外空间的临时文件大小。临时文件名为 space_placeholder_file，位于 storage.data-dir 目录下。TiKV 磁盘空间耗尽无法正常启动需要紧急干预时，可以删除该文件，并且将 reserve-space 设置为 0MB。'
variation = 'TikvConfig.storage.reserve-space'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.storage.reserve-space"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("storage.reserve-space")), "5GB") == 0 {
        return true
    }else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '5GB'

[[rule]]
id = 2041
name = 'TikvConfig.storage.enable-ttl'
description = 'TTL 即 Time to live。数据超过 TTL 时间后会被自动删除。用户需在客户端写入请求中指定 TTL。不指定 TTL 即表明相应数据不会被自动删除。'
variation = 'TikvConfig.storage.enable-ttl'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.storage.enable-ttl"
begin
    if ToBool(TikvConfig.GetValueByTagPath("storage.enable-ttl")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2042
name = 'TikvConfig.storage.ttl-check-poll-interval'
description = '回收数据物理空间的检查周期。如果数据超过了 TTL 时间，数据的物理空间会在检查时被强制回收。'
variation = 'TikvConfig.storage.ttl-check-poll-interval'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.storage.ttl-check-poll-interval"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("storage.ttl-check-poll-interval")),"12h") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '12h'

[[rule]]
id = 2043
name = 'TikvConfig.storage.block-cache.shared'
description = '是否开启共享 block cache'
variation = 'TikvConfig.storage.block-cache.shared'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.storage.block-cache.shared"
begin
    if ToBool(TikvConfig.GetValueByTagPath("storage.block-cache.shared")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2045
name = 'TikvConfig.storage.io-rate-limit.max-bytes-per-sec'
description = '限制服务器每秒从磁盘读取数据或写入数据的最大 I/O 字节数，I/O 类型由下面的 mode 配置项决定。达到该限制后，TiKV 倾向于放缓后台操作为前台操作节流。该配置项值应设为磁盘的最佳 I/O 带宽，例如云盘厂商指定的最大 I/O 带宽。'
variation = 'TikvConfig.storage.io-rate-limit.max-bytes-per-sec'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.storage.io-rate-limit.max-bytes-per-sec"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("storage.io-rate-limit.max-bytes-per-sec")),"0MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0MB'

[[rule]]
id = 2046
name = 'TikvConfig.storage.io-rate-limit.mode'
description = '确定哪些类型的 I/O 操作被计数并受 max-bytes-per-sec 阈值的限流。当前 TiKV 只支持 write-only 只读模式。'
variation = 'TikvConfig.storage.io-rate-limit.mode'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.storage.io-rate-limit.mode"
begin
    if ToString(TikvConfig.GetValueByTagPath("storage.io-rate-limit.mode")) == "write-only" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'write-only'

[[rule]]
id = 2047
name = 'TikvConfig.raftstore.prevote'
description = '开启 Prevote 的开关，开启有助于减少隔离恢复后对系统造成的抖动。'
variation = 'TikvConfig.raftstore.prevote'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.prevote"
begin
    if ToBool(TikvConfig.GetValueByTagPath("raftstore.prevote")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

#[[rule]]
#id = 2049
#name = 'TikvConfig.raftstore.raft-base-tick-interval'
#description = '状态机 tick 一次的间隔时间。'
#variation = 'TikvConfig.raftstore.raft-base-tick-interval'
#check_type = 'defaultConfig'
#execute_rule = '''
#rule "TikvConfig.raftstore.raft-base-tick-interval"
#begin
#    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.raft-base-tick-interval")), "1s") == 0 {
#        return true
#    } else {
#        return false
#    }
#end
#'''
#name_struct = 'TikvConfig'
#expect_res = ''
#warn_level = 'info'
#version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
#default = '1s'

[[rule]]
id = 2050
name = 'TikvConfig.raftstore.raft-heartbeat-ticks'
description = '发送心跳时经过的 tick 个数，即每隔 raft-base-tick-interval * raft-heartbeat-ticks 时间发送一次心跳。'
variation = 'TikvConfig.raftstore.raft-heartbeat-ticks'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.raft-heartbeat-ticks"
begin
    if ToString(TikvConfig.GetValueByTagPath("raftstore.raft-heartbeat-ticks")) == "2" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '2'

[[rule]]
id = 2051
name = 'TikvConfig.raftstore.raft-election-timeout-ticks'
description = '发起选举时经过的 tick 个数，即如果处于无主状态，大约经过 raft-base-tick-interval * raft-election-timeout-ticks 时间以后发起选举。'
variation = 'TikvConfig.raftstore.raft-election-timeout-ticks'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.raft-election-timeout-ticks"
begin
    if ToString(TikvConfig.GetValueByTagPath("raftstore.raft-election-timeout-ticks")) == "10" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10'

[[rule]]
id = 2052
name = 'TikvConfig.raftstore.raft-min-election-timeout-ticks'
description = '发起选举时至少经过的 tick 个数，如果为 0，则表示使用 raft-election-timeout-ticks，不能比 raft-election-timeout-ticks 小。'
variation = 'TikvConfig.raftstore.raft-min-election-timeout-ticks'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.raft-min-election-timeout-ticks"
begin
    if ToInt(TikvConfig.GetValueByTagPath("raftstore.raft-min-election-timeout-ticks")) == ToInt(TikvConfig.GetValueByTagPath("raftstore.raft-election-timeout-ticks")) {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0'

[[rule]]
id = 2053
name = 'TikvConfig.raftstore.raft-max-election-timeout-ticks'
description = '发起选举时最多经过的 tick 个数，如果为 0，则表示使用 raft-election-timeout-ticks * 2。'
variation = 'TikvConfig.raftstore.raft-max-election-timeout-ticks'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.raft-max-election-timeout-ticks"
begin
    if ToInt(TikvConfig.GetValueByTagPath("raftstore.raft-max-election-timeout-ticks")) == ToInt(TikvConfig.GetValueByTagPath("raftstore.raft-election-timeout-ticks")) * 2 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0'

#[[rule]]
#id = 2054
#name = 'TikvConfig.raftstore.raft-max-size-per-msg'
#description = '产生的单个消息包的大小限制，软限制。'
#variation = 'TikvConfig.raftstore.raft-max-size-per-msg'
#check_type = 'defaultConfig'
#execute_rule = '''
#rule "TikvConfig.raftstore.raft-max-size-per-msg"
#begin
#    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("raftstore.raft-max-size-per-msg")), "1MB") == 0 {
#        return true
#    } else {
#        return false
#    }
#end
#'''
#name_struct = 'TikvConfig'
#expect_res = ''
#warn_level = 'info'
#version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
#default = '1MB'

[[rule]]
id = 2055
name = 'TikvConfig.raftstore.raft-max-inflight-msgs'
description = '待确认日志个数的数量，如果超过这个数量将会减缓发送日志的个数。'
variation = 'TikvConfig.raftstore.raft-max-inflight-msgs'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.raft-max-inflight-msgs"
begin
    if ToString(TikvConfig.GetValueByTagPath("raftstore.raft-max-inflight-msgs")) == "256" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '256'

[[rule]]
id = 2056
name = 'TikvConfig.raftstore.raft-entry-max-size'
description = '单个日志最大大小，硬限制。'
variation = 'TikvConfig.raftstore.raft-entry-max-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.raft-entry-max-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("raftstore.raft-entry-max-size")),"8MB")==0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '8MB'

[[rule]]
id = 2057
name = 'TikvConfig.raftstore.raft-log-gc-tick-interval'
description = '删除 raft 日志的轮询任务调度间隔时间，0 表示不启用。'
variation = 'TikvConfig.raftstore.raft-log-gc-tick-interval'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.raft-log-gc-tick-interval"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.raft-log-gc-tick-interval")),"10s")==0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10s'

[[rule]]
id = 2058
name = 'TikvConfig.raftstore.raft-log-gc-threshold'
description = '允许残余的 raft 日志个数，这是一个软限制。'
variation = 'TikvConfig.raftstore.raft-log-gc-threshold'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.raft-log-gc-threshold"
begin
    if ToString(TikvConfig.GetValueByTagPath("raftstore.raft-log-gc-threshold")) == "50" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '50'

[[rule]]
id = 2061
name = 'TikvConfig.raftstore.raft-entry-cache-life-time'
description = '内存中日志 cache 允许的最长残留时间。'
variation = 'TikvConfig.raftstore.raft-entry-cache-life-time'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.raft-entry-cache-life-time"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.raft-entry-cache-life-time")), "30s") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '30s'

[[rule]]
id = 2062
name = 'TikvConfig.raftstore.raft-reject-transfer-leader-duration'
description = '新节点保护时间，控制迁移 leader 到新加节点的最小时间，设置过小容易导致迁移 leader 失败。'
variation = 'TikvConfig.raftstore.raft-reject-transfer-leader-duration'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.raft-reject-transfer-leader-duration"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.raft-reject-transfer-leader-duration")), "3s") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2'
default = '3s'

[[rule]]
id = 2063
name = 'TikvConfig.raftstore.hibernate-regions'
description = '打开或关闭静默 Region。打开后，如果 Region 长时间处于非活跃状态，即被自动设置为静默状态。静默状态的 Region 可以降低 Leader 和 Follower 之间心跳信息的系统开销。可以通过 raftstore.peer-stale-state-check-interval 调整 Leader 和 Follower 之间的心跳间隔。'
variation = 'TikvConfig.raftstore.hibernate-regions'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.hibernate-regions"
begin
    if ToBool(TikvConfig.GetValueByTagPath("raftstore.hibernate-regions")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1'
default = 'false'

[[rule]]
id = 2064
name = 'TikvConfig.raftstore.hibernate-regions'
description = '打开或关闭静默 Region。打开后，如果 Region 长时间处于非活跃状态，即被自动设置为静默状态。静默状态的 Region 可以降低 Leader 和 Follower 之间心跳信息的系统开销。可以通过 raftstore.peer-stale-state-check-interval 调整 Leader 和 Follower 之间的心跳间隔。'
variation = 'TikvConfig.raftstore.hibernate-regions'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.hibernate-regions"
begin
    if ToBool(TikvConfig.GetValueByTagPath("raftstore.hibernate-regions")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2065
name = 'TikvConfig.raftstore.peer-stale-state-check-interval'
description = '修改对 Region 的状态检查间隔时间。'
variation = 'TikvConfig.raftstore.peer-stale-state-check-interval'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.peer-stale-state-check-interval"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.peer-stale-state-check-interval")), "5m") ==0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '5 min'

[[rule]]
id = 2066
name = 'TikvConfig.raftstore.split-region-check-tick-interval'
description = '检查 region 是否需要分裂的时间间隔，0 表示不启用。'
variation = 'TikvConfig.raftstore.split-region-check-tick-interval'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.split-region-check-tick-interval"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.split-region-check-tick-interval")), "10s") ==0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10s'

[[rule]]
id = 2068
name = 'TikvConfig.raftstore.region-compact-check-interval'
description = '检查是否需要人工触发 rocksdb compaction 的时间间隔，0 表示不启用。'
variation = 'TikvConfig.raftstore.region-compact-check-interval'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.region-compact-check-interval"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.region-compact-check-interval")), "5m") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '5m'

[[rule]]
id = 2069
name = 'TikvConfig.raftstore.region-compact-check-step'
description = '每轮校验人工 compaction 时，一次性检查的 region 个数。'
variation = 'TikvConfig.raftstore.region-compact-check-step'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.region-compact-check-step"
begin
    if ToString(TikvConfig.GetValueByTagPath("raftstore.region-compact-check-step")) == "100" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '100'

[[rule]]
id = 2070
name = 'TikvConfig.raftstore.region-compact-min-tombstones'
description = '触发 rocksdb compaction 需要的 tombstone 个数。'
variation = 'TikvConfig.raftstore.region-compact-min-tombstones'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.region-compact-min-tombstones"
begin
    if ToString(TikvConfig.GetValueByTagPath("raftstore.region-compact-min-tombstones")) == "10000" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10000'

[[rule]]
id = 2071
name = 'TikvConfig.raftstore.region-compact-tombstones-percent'
description = '触发 rocksdb compaction 需要的 tombstone 所占比例。'
variation = 'TikvConfig.raftstore.region-compact-tombstones-percent'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.region-compact-tombstones-percent"
begin
    if ToString(TikvConfig.GetValueByTagPath("raftstore.region-compact-tombstones-percent")) == "30" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '30'

[[rule]]
id = 2072
name = 'TikvConfig.raftstore.pd-heartbeat-tick-interval'
description = '触发 region 对 PD 心跳的时间间隔，0 表示不启用。'
variation = 'TikvConfig.raftstore.pd-heartbeat-tick-interval'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.pd-heartbeat-tick-interval"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.pd-heartbeat-tick-interval")), "1m") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1m'

[[rule]]
id = 2073
name = 'TikvConfig.raftstore.pd-store-heartbeat-tick-interval'
description = '触发 store 对 PD 心跳的时间间隔，0 表示不启用。'
variation = 'TikvConfig.raftstore.pd-store-heartbeat-tick-interval'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.pd-store-heartbeat-tick-interval"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.pd-store-heartbeat-tick-interval")), "10s") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10s'

[[rule]]
id = 2074
name = 'TikvConfig.raftstore.snap-mgr-gc-tick-interval'
description = '触发回收过期 snapshot 文件的时间间隔，0 表示不启用。'
variation = 'TikvConfig.raftstore.snap-mgr-gc-tick-interval'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.snap-mgr-gc-tick-interval"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.snap-mgr-gc-tick-interval")), "1m") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1m'

[[rule]]
id = 2075
name = 'TikvConfig.raftstore.snap-gc-timeout'
description = 'snapshot 文件的最长保存时间。'
variation = 'TikvConfig.raftstore.snap-gc-timeout'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.snap-gc-timeout"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.snap-gc-timeout")), "4h") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '4h'

[[rule]]
id = 2076
name = 'TikvConfig.raftstore.lock-cf-compact-interval'
description = '触发对 lock CF compact 检查的时间间隔。'
variation = 'TikvConfig.raftstore.lock-cf-compact-interval'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.lock-cf-compact-interval"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.lock-cf-compact-interval")), "10m") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10m'

[[rule]]
id = 2077
name = 'TikvConfig.raftstore.lock-cf-compact-bytes-threshold'
description = '触发对 lock CF 进行 compact 的大小。'
variation = 'TikvConfig.raftstore.lock-cf-compact-bytes-threshold'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.lock-cf-compact-bytes-threshold"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("raftstore.lock-cf-compact-bytes-threshold")), "256MB") ==0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '256MB'

[[rule]]
id = 2078
name = 'TikvConfig.raftstore.notify-capacity'
description = 'region 消息队列的最长长度。'
variation = 'TikvConfig.raftstore.notify-capacity'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.notify-capacity"
begin
    if ToString(TikvConfig.GetValueByTagPath("raftstore.notify-capacity")) == "40960" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '40960'

[[rule]]
id = 2079
name = 'TikvConfig.raftstore.messages-per-tick'
description = '每轮处理的消息最大个数。'
variation = 'TikvConfig.raftstore.messages-per-tick'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.messages-per-tick"
begin
    if ToString(TikvConfig.GetValueByTagPath("raftstore.messages-per-tick")) == "4096" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '4096'

[[rule]]
id = 2080
name = 'TikvConfig.raftstore.max-peer-down-duration-before-v5.2'
description = '副本允许的最长未响应时间，超过将被标记为 down，后续 PD 会尝试将其删掉。'
variation = 'TikvConfig.raftstore.max-peer-down-duration'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.max-peer-down-duration"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.max-peer-down-duration")), "5m") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2'
default = '5m'

[[rule]]
id = 2081
name = 'TikvConfig.raftstore.max-leader-missing-duration'
description = '允许副本处于无主状态的最长时间，超过将会向 PD 校验自己是否已经被删除。'
variation = 'TikvConfig.raftstore.max-leader-missing-duration'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.max-leader-missing-duration"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.max-leader-missing-duration")), "2h") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '2h'

[[rule]]
id = 2082
name = 'TikvConfig.raftstore.abnormal-leader-missing-duration'
description = '允许副本处于无主状态的时间，超过将视为异常，标记在 metrics 和日志中。'
variation = 'TikvConfig.raftstore.abnormal-leader-missing-duration'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.abnormal-leader-missing-duration"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.abnormal-leader-missing-duration")), "10m")==0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10m'

[[rule]]
id = 2083
name = 'TikvConfig.raftstore.peer-stale-state-check-interval'
description = '触发检验副本是否处于无主状态的时间间隔。'
variation = 'TikvConfig.raftstore.peer-stale-state-check-interval'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.peer-stale-state-check-interval"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.peer-stale-state-check-interval")), "5m") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '5m'

[[rule]]
id = 2084
name = 'TikvConfig.raftstore.leader-transfer-max-log-lag'
description = '尝试转移领导权时被转移者允许的最大日志缺失个数。'
variation = 'TikvConfig.raftstore.leader-transfer-max-log-lag'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.leader-transfer-max-log-lag"
begin
    if ToString(TikvConfig.GetValueByTagPath("raftstore.leader-transfer-max-log-lag")) == "128" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '128'

[[rule]]
id = 2085
name = 'TikvConfig.raftstore.snap-apply-batch-size'
description = '当导入 snapshot 文件需要写数据时，内存写缓存的大小'
variation = 'TikvConfig.raftstore.snap-apply-batch-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.snap-apply-batch-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("raftstore.snap-apply-batch-size")), "10MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10MB'

#TODO
[[rule]]
id = 2086
name = 'TikvConfig.raftstore.consistency-check-interval'
description = '触发一致性检查的时间间隔, 0 表示不启用。'
variation = 'TikvConfig.raftstore.consistency-check-interval'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.consistency-check-interval"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.consistency-check-interval")), "0s") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0s'

[[rule]]
id = 2087
name = 'TikvConfig.raftstore.raft-store-max-leader-lease'
description = 'region 主可信任期的最长时间。'
variation = 'TikvConfig.raftstore.raft-store-max-leader-lease'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.raft-store-max-leader-lease"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.raft-store-max-leader-lease")), "9s") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '9s'

[[rule]]
id = 2088
name = 'TikvConfig.raftstore.right-derive-when-split'
description = '为 true 时，以最大分裂 key 为起点的 region 复用原 region 的 key；否则以原 region 起点 key 作为起点的 region 复用原 region 的 key。'
variation = 'TikvConfig.raftstore.right-derive-when-split'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.right-derive-when-split"
begin
    if ToBool(TikvConfig.GetValueByTagPath("raftstore.right-derive-when-split")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2089
name = 'TikvConfig.raftstore.allow-remove-leader'
description = '允许删除主开关。'
variation = 'TikvConfig.raftstore.allow-remove-leader'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.allow-remove-leader"
begin
    if ToBool(TikvConfig.GetValueByTagPath("raftstore.allow-remove-leader")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2090
name = 'TikvConfig.raftstore.merge-max-log-gap'
description = '进行 merge 时，允许的最大日志缺失个数。'
variation = 'TikvConfig.raftstore.merge-max-log-gap'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.merge-max-log-gap"
begin
    if ToString(TikvConfig.GetValueByTagPath("raftstore.merge-max-log-gap")) == "10" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10'

[[rule]]
id = 2091
name = 'TikvConfig.raftstore.merge-check-tick-interval'
description = '触发 merge 完成检查的时间间隔。'
variation = 'TikvConfig.raftstore.merge-check-tick-interval'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.merge-check-tick-interval"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.merge-check-tick-interval")), "2s") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '2s'

[[rule]]
id = 2092
name = 'TikvConfig.raftstore.use-delete-range'
description = '开启 rocksdb delete_range 接口删除数据的开关。'
variation = 'TikvConfig.raftstore.use-delete-range'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.use-delete-range"
begin
    if ToBool(TikvConfig.GetValueByTagPath("raftstore.use-delete-range")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2093
name = 'TikvConfig.raftstore.cleanup-import-sst-interval'
description = '触发检查过期 SST 文件的时间间隔，0 表示不启用。'
variation = 'TikvConfig.raftstore.cleanup-import-sst-interval'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.cleanup-import-sst-interval"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.cleanup-import-sst-interval")), "10m") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10m'

[[rule]]
id = 2094
name = 'TikvConfig.raftstore.local-read-batch-size'
description = '一轮处理读请求的最大个数。'
variation = 'TikvConfig.raftstore.local-read-batch-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.local-read-batch-size"
begin
    if ToString(TikvConfig.GetValueByTagPath("raftstore.local-read-batch-size")) == "1024" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1024'

[[rule]]
id = 2095
name = 'TikvConfig.raftstore.apply-max-batch-size'
description = '一轮处理数据落盘的最大请求个数。'
variation = 'TikvConfig.raftstore.apply-max-batch-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.apply-max-batch-size"
begin
    if ToString(TikvConfig.GetValueByTagPath("raftstore.apply-max-batch-size")) == "256" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '256'

[[rule]]
id = 2096
name = 'TikvConfig.raftstore.apply-pool-size'
description = '处理数据落盘的线程池线程数。'
variation = 'TikvConfig.raftstore.apply-pool-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.apply-pool-size"
begin
    if ToString(TikvConfig.GetValueByTagPath("raftstore.apply-pool-size")) == "2" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '2'

[[rule]]
id = 2097
name = 'TikvConfig.raftstore.store-max-batch-size'
description = '一轮处理的最大请求个数。'
variation = 'TikvConfig.raftstore.store-max-batch-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.store-max-batch-size"
begin
    if ToString(TikvConfig.GetValueByTagPath("raftstore.store-max-batch-size")) == "1024" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1'
default = '1024'

[[rule]]
id = 2098
name = 'TikvConfig.raftstore.store-max-batch-size'
description = '一轮处理的最大请求个数。'
variation = 'TikvConfig.raftstore.store-max-batch-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.store-max-batch-size"
begin
    if ToBool(TikvConfig.GetValueByTagPath("raftstore.hibernate-regions")) == true && ToInt(TikvConfig.GetValueByTagPath("raftstore.store-max-batch-size")) == 256 {
        return true
    } else if ToBool(TikvConfig.GetValueByTagPath("raftstore.hibernate-regions")) == false && ToInt(TikvConfig.GetValueByTagPath("raftstore.store-max-batch-size")) == 1024 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '256'

[[rule]]
id = 2099
name = 'TikvConfig.raftstore.store-pool-size'
description = '处理 raft 的线程池线程数。'
variation = 'TikvConfig.raftstore.store-pool-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.store-pool-size"
begin
    if ToString(TikvConfig.GetValueByTagPath("raftstore.store-pool-size")) == "2" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '2'

[[rule]]
id = 2100
name = 'TikvConfig.raftstore.future-poll-size'
description = '驱动 future 的线程池线程数。'
variation = 'TikvConfig.raftstore.future-poll-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.future-poll-size"
begin
    if ToString(TikvConfig.GetValueByTagPath("raftstore.future-poll-size")) == "1" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1'

[[rule]]
id = 2101
name = 'TikvConfig.coprocessor.split-region-on-table'
description = '开启按 table 分裂 Region的开关，建议仅在 TiDB 模式下使用。'
variation = 'TikvConfig.coprocessor.split-region-on-table'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.coprocessor.split-region-on-table"
begin
    if ToBool(TikvConfig.GetValueByTagPath("coprocessor.split-region-on-table")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2102
name = 'TikvConfig.coprocessor.batch-split-limit'
description = '批量分裂 Region 的阈值，调大该值可加速分裂 Region。'
variation = 'TikvConfig.coprocessor.batch-split-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.coprocessor.batch-split-limit"
begin
    if ToString(TikvConfig.GetValueByTagPath("coprocessor.batch-split-limit")) == "10" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10'

[[rule]]
id = 2103
name = 'TikvConfig.coprocessor.region-max-size'
description = 'Region 容量空间最大值，超过时系统分裂成多个 Region。'
variation = 'TikvConfig.coprocessor.region-max-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.coprocessor.region-max-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("coprocessor.region-max-size")), "144MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '144MB'

[[rule]]
id = 2104
name = 'TikvConfig.coprocessor.region-split-size'
description = '分裂后新 Region 的大小，此值属于估算值。'
variation = 'TikvConfig.coprocessor.region-split-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.coprocessor.region-split-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("coprocessor.region-split-size")), "96MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '96MB'

[[rule]]
id = 2105
name = 'TikvConfig.coprocessor.region-max-keys'
description = 'Region 最多允许的 key 的个数，超过时系统分裂成多个 Region。'
variation = 'TikvConfig.coprocessor.region-max-keys'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.coprocessor.region-max-keys"
begin
    if ToString(TikvConfig.GetValueByTagPath("coprocessor.region-max-keys")) == "1440000" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1440000'

[[rule]]
id = 2106
name = 'TikvConfig.coprocessor.region-split-keys'
description = '分裂后新 Region 的 key 的个数，此值属于估算值。'
variation = 'TikvConfig.coprocessor.region-split-keys'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.coprocessor.region-split-keys"
begin
    if ToString(TikvConfig.GetValueByTagPath("coprocessor.region-split-keys")) == "960000" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '960000'

#[[rule]]
#id = 2107
#name = 'TikvConfig.rocksdb.max-background-jobs'
#description = 'RocksDB 后台线程个数。'
#variation = 'TikvConfig.rocksdb.max-background-jobs'
#check_type = 'defaultConfig'
#execute_rule = '''
#rule "TikvConfig.rocksdb.max-background-jobs"
#begin
#    if ToString(TikvConfig.GetValueByTagPath("rocksdb.max-background-jobs")) == "8" {
#        return true
#    } else {
#        return false
#    }
#end
#'''
#name_struct = 'TikvConfig'
#expect_res = ''
#warn_level = 'info'
#version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
#default = '8'

#[[rule]]
#id = 2108
#name = 'TikvConfig.rocksdb.max-background-flushes'
#description = 'RocksDB 用于刷写 memtable 的最大后台线程数。'
#variation = 'TikvConfig.rocksdb.max-background-flushes'
#check_type = 'defaultConfig'
#execute_rule = '''
#rule "TikvConfig.rocksdb.max-background-flushes"
#begin
#    if ToString(TikvConfig.GetValueByTagPath("rocksdb.max-background-flushes")) == "2" {
#        return true
#    } else {
#        return false
#    }
#end
#'''
#name_struct = 'TikvConfig'
#expect_res = ''
#warn_level = 'info'
#version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
#default = '2'

#[[rule]]
#id = 2109
#name = 'TikvConfig.rocksdb.max-sub-compactions'
#description = 'RocksDB 进行 subcompaction 的并发个数。'
#variation = 'TikvConfig.rocksdb.max-sub-compactions'
#check_type = 'defaultConfig'
#execute_rule = '''
#rule "TikvConfig.rocksdb.max-sub-compactions"
#begin
#    if ToString(TikvConfig.GetValueByTagPath("rocksdb.max-sub-compactions")) == "3" {
#        return true
#    } else {
#        return false
#    }
#end
#'''
#name_struct = 'TikvConfig'
#expect_res = ''
#warn_level = 'info'
#version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
#default = '3'

[[rule]]
id = 2110
name = 'TikvConfig.rocksdb.max-open-files'
description = 'RocksDB 可以打开的文件总数。'
variation = 'TikvConfig.rocksdb.max-open-files'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.max-open-files"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.max-open-files")) == "40960" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '40960'

[[rule]]
id = 2111
name = 'TikvConfig.rocksdb.max-manifest-file-size'
description = 'RocksDB Manifest 文件最大大小。'
variation = 'TikvConfig.rocksdb.max-manifest-file-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.max-manifest-file-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.max-manifest-file-size")), "128MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '128MB'

[[rule]]
id = 2112
name = 'TikvConfig.rocksdb.create-if-missing'
description = '自动创建 DB 开关。'
variation = 'TikvConfig.rocksdb.create-if-missing'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.create-if-missing"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.create-if-missing")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2113
name = 'TikvConfig.rocksdb.wal-recovery-mode'
description = 'WAL 恢复模式，取值：0（TolerateCorruptedTailRecords），1（AbsoluteConsistency），2（PointInTimeRecovery），3（SkipAnyCorruptedRecords）。'
variation = 'TikvConfig.rocksdb.wal-recovery-mode'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.wal-recovery-mode"
begin
    if ToInt(TikvConfig.GetValueByTagPath("rocksdb.wal-recovery-mode")) == 2 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '2'

#TODO
[[rule]]
id = 2115
name = 'TikvConfig.rocksdb.wal-ttl-seconds'
description = '归档 WAL 生存周期，超过该值时，系统会删除相关 WAL。'
variation = 'TikvConfig.rocksdb.wal-ttl-seconds'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.wal-ttl-seconds"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("rocksdb.wal-ttl-seconds")), "0s") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0s'

#TODO
[[rule]]
id = 2116
name = 'TikvConfig.rocksdb.wal-size-limit'
description = '归档 WAL 大小限制，超过该值时，系统会删除相关 WAL，单位：B|KB|MB|GB'
variation = 'TikvConfig.rocksdb.wal-size-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.wal-size-limit"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.wal-size-limit")), "0") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0'

[[rule]]
id = 2117
name = 'TikvConfig.rocksdb.enable-statistics'
description = '开启 RocksDB 的统计信息。'
variation = 'TikvConfig.rocksdb.enable-statistics'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.enable-statistics"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.enable-statistics")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2118
name = 'TikvConfig.rocksdb.stats-dump-period'
description = '将统计信息输出到日志中的间隔时间。'
variation = 'TikvConfig.rocksdb.stats-dump-period'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.stats-dump-period"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("rocksdb.stats-dump-period")), "10m") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10m'

#TODO
[[rule]]
id = 2119
name = 'TikvConfig.rocksdb.compaction-readahead-size'
description = '开启 RocksDB compaction 过程中的预读功能，该项指定预读数据的大小。如果使用的是机械磁盘，建议该值至少为 2MB。'
variation = 'TikvConfig.rocksdb.compaction-readahead-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.compaction-readahead-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.compaction-readahead-size")), "0") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0'

[[rule]]
id = 2120
name = 'TikvConfig.rocksdb.writable-file-max-buffer-size'
description = 'WritableFileWrite 所使用的最大的 buffer 大小。'
variation = 'TikvConfig.rocksdb.writable-file-max-buffer-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writable-file-max-buffer-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.writable-file-max-buffer-size")), "1MB") ==0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1MB'

[[rule]]
id = 2121
name = 'TikvConfig.rocksdb.use-direct-io-for-flush-and-compaction'
description = 'flush 或者 compaction 开启 DirectIO 的开关。'
variation = 'TikvConfig.rocksdb.use-direct-io-for-flush-and-compaction'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.use-direct-io-for-flush-and-compaction"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.use-direct-io-for-flush-and-compaction")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2122
name = 'TikvConfig.rocksdb.rate-bytes-per-sec'
description = 'RocksDB compaction rate limiter 的限制速率。'
variation = 'TikvConfig.rocksdb.rate-bytes-per-sec'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.rate-bytes-per-sec"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.rate-bytes-per-sec")), "10GB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10GB'

[[rule]]
id = 2123
name = 'TikvConfig.rocksdb.rate-limiter-mode'
description = 'RocksDB 的 compaction rate limiter 模式。'
variation = 'TikvConfig.rocksdb.rate-limiter-mode'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.rate-limiter-mode"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.rate-limiter-mode")) == "2" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '2'

[[rule]]
id = 2124
name = 'TikvConfig.rocksdb.rate-limiter-auto-tuned'
description = '控制是否依据最近的负载量自动优化 RocksDB 的 compaction rate limiter 配置。此配置项开启后，compaction pending bytes 监控指标值会比一般情况下稍微高些。'
variation = 'TikvConfig.rocksdb.rate-limiter-auto-tuned'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.rate-limiter-auto-tuned"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.rate-limiter-auto-tuned")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2125
name = 'TikvConfig.rocksdb.enable-pipelined-write'
description = '开启 Pipelined Write 的开关。'
variation = 'TikvConfig.rocksdb.enable-pipelined-write'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.enable-pipelined-write"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.enable-pipelined-write")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2126
name = 'TikvConfig.rocksdb.bytes-per-sync'
description = '异步 Sync 限速速率。单位：B|KB|MB|GB'
variation = 'TikvConfig.rocksdb.bytes-per-sync'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.bytes-per-sync"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.bytes-per-sync")), "1MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1MB'

[[rule]]
id = 2127
name = 'TikvConfig.rocksdb.wal-bytes-per-sync'
description = 'WAL Sync 限速速率'
variation = 'TikvConfig.rocksdb.wal-bytes-per-sync'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.wal-bytes-per-sync"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.wal-bytes-per-sync")), "512KB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '512Kb'

[[rule]]
id = 2128
name = 'TikvConfig.rocksdb.info-log-max-size'
description = 'Info 日志的最大大小。'
variation = 'TikvConfig.rocksdb.info-log-max-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.info-log-max-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.info-log-max-size")), "1GB") ==0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1GB'

[[rule]]
id = 2129
name = 'TikvConfig.rocksdb.info-log-roll-time'
description = '日志截断间隔时间，如果为 0s 则不截断。'
variation = 'TikvConfig.rocksdb.info-log-roll-time'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.info-log-roll-time"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("rocksdb.info-log-roll-time")), "0s") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0s'

[[rule]]
id = 2130
name = 'TikvConfig.rocksdb.info-log-keep-log-file-num'
description = '保留日志文件最大个数'
variation = 'TikvConfig.rocksdb.info-log-keep-log-file-num'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.info-log-keep-log-file-num"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.info-log-keep-log-file-num")) == "10" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10'

[[rule]]
id = 2132
name = 'TikvConfig.rocksdb.titan.enabled'
description = '开启 Titan 开关。'
variation = 'TikvConfig.rocksdb.titan.enabled'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.titan.enabled"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.titan.enabled")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2134
name = 'TikvConfig.rocksdb.titan.disable-gc'
description = '关闭 Titan 对 Blob 文件的 GC 的开关。'
variation = 'TikvConfig.rocksdb.titan.disable-gc'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.titan.disable-gc"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.titan.disable-gc")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>=v5.3.0'
default = 'false'

#[[rule]]
#id = 2135
#name = 'TikvConfig.rocksdb.titan.max-background-gc'
#description = 'Titan 后台 GC 的线程个数。'
#variation = 'TikvConfig.rocksdb.titan.max-background-gc'
#check_type = 'defaultConfig'
#execute_rule = '''
#rule "TikvConfig.rocksdb.titan.max-background-gc"
#begin
#    if ToString(TikvConfig.GetValueByTagPath("rocksdb.titan.max-background-gc")) == "4" {
#        return true
#    } else {
#        return false
#    }
#end
#'''
#name_struct = 'TikvConfig'
#expect_res = ''
#warn_level = 'info'
#version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
#default = '4'

#[[rule]]
#id = 2136
#name = 'TikvConfig.raftdb.max-background-jobs'
#description = 'RocksDB 后台线程个数。'
#variation = 'TikvConfig.raftdb.max-background-jobs'
#check_type = 'defaultConfig'
#execute_rule = '''
#rule "TikvConfig.raftdb.max-background-jobs"
#begin
#    if ToString(TikvConfig.GetValueByTagPath("raftdb.max-background-jobs")) == "4" {
#        return true
#    } else {
#        return false
#    }
#end
#'''
#name_struct = 'TikvConfig'
#expect_res = ''
#warn_level = 'info'
#version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
#default = '4'
#
#[[rule]]
#id = 2137
#name = 'TikvConfig.raftdb.max-sub-compactions'
#description = 'RocksDB 进行 subcompaction 的并发数。'
#variation = 'TikvConfig.raftdb.max-sub-compactions'
#check_type = 'defaultConfig'
#execute_rule = '''
#rule "TikvConfig.raftdb.max-sub-compactions"
#begin
#    if ToString(TikvConfig.GetValueByTagPath("raftdb.max-sub-compactions")) == "2" {
#        return true
#    } else {
#        return false
#    }
#end
#'''
#name_struct = 'TikvConfig'
#expect_res = ''
#warn_level = 'info'
#version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
#default = '2'

[[rule]]
id = 2142
name = 'TikvConfig.security.redact-info-log'
description = '若开启该选项，日志中的用户数据会以 ? 代替。'
variation = 'TikvConfig.security.redact-info-log'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.security.redact-info-log"
begin
    if ToBool(TikvConfig.GetValueByTagPath("security.redact-info-log")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2143
name = 'TikvConfig.security.encryption.data-encryption-method'
description = '数据文件的加密方法。 可选值："plaintext"，"aes128-ctr"，"aes192-ctr"，"aes256-ctr" 选择 "plaintext" 以外的值则表示启用加密功能。此时必须指定主密钥。'
variation = 'TikvConfig.security.encryption.data-encryption-method'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.security.encryption.data-encryption-method"
begin
    if ToString(TikvConfig.GetValueByTagPath("security.encryption.data-encryption-method")) == "plaintext" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'plaintext'

[[rule]]
id = 2144
name = 'TikvConfig.security.encryption.data-key-rotation-period'
description = '指定 TiKV 轮换数据密钥的频率'
variation = 'TikvConfig.security.encryption.data-key-rotation-period'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.security.encryption.data-key-rotation-period"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("security.encryption.data-key-rotation-period")), "7d") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '7d'

[[rule]]
id = 2145
name = 'TikvConfig.security.encryption.enable-file-dictionary-log'
description = '启用优化，以减少 TiKV 管理加密元数据时的 I/O 操作和互斥锁竞争。'
variation = 'TikvConfig.security.encryption.enable-file-dictionary-log'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.security.encryption.enable-file-dictionary-log"
begin
    if ToBool(TikvConfig.GetValueByTagPath("security.encryption.enable-file-dictionary-log")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2148
name = "TikvConfig.import.num-threads"
description = '处理 RPC 请求线程数。'
variation = "TikvConfig.import.num-threads"
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.import.num-threads"
begin
    if ToString(TikvConfig.GetValueByTagPath("import.num-threads")) == "8" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '8'

[[rule]]
id = 2150
name = 'TikvConfig.gc.enable-compaction-filter'
description = '是否开启 GC in Compaction Filter 特性'
variation = 'TikvConfig.gc.enable-compaction-filter'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.gc.enable-compaction-filter"
begin
    if ToBool(TikvConfig.GetValueByTagPath("gc.enable-compaction-filter")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2152
name = 'TikvConfig.cdc.min-ts-interval'
description = '定期推进 Resolved TS 的时间间隔。'
variation = 'TikvConfig.cdc.min-ts-interval'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.cdc.min-ts-interval"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("cdc.min-ts-interval")), "1s") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1s'

[[rule]]
id = 2153
name = 'TikvConfig.cdc.old-value-cache-memory-quota'
description = '缓存在内存中的 TiCDC Old Value 的条目占用内存的上限。'
variation = 'TikvConfig.cdc.old-value-cache-memory-quota'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.cdc.old-value-cache-memory-quota"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("cdc.old-value-cache-memory-quota")), "512MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '512MB'

[[rule]]
id = 2154
name = 'TikvConfig.cdc.sink-memory-quota'
description = '缓存在内存中的 TiCDC 数据变更事件占用内存的上限。'
variation = 'TikvConfig.cdc.sink-memory-quota'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.cdc.sink-memory-quota"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("cdc.sink-memory-quota")), "512MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '512MB'

[[rule]]
id = 2155
name = 'TikvConfig.cdc.incremental-scan-speed-limit'
description = '增量扫描历史数据的速度上限, MB/s'
variation = 'TikvConfig.cdc.incremental-scan-speed-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.cdc.incremental-scan-speed-limit"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("cdc.incremental-scan-speed-limit")), "128MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '128MB'

[[rule]]
id = 2156
name = 'TikvConfig.cdc.incremental-scan-threads'
description = '增量扫描历史数据任务的线程个数。'
variation = 'TikvConfig.cdc.incremental-scan-threads'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.cdc.incremental-scan-threads"
begin
    if ToString(TikvConfig.GetValueByTagPath("cdc.incremental-scan-threads")) == "4" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '4'

[[rule]]
id = 2157
name = 'TikvConfig.cdc.incremental-scan-concurrency'
description = '增量扫描历史数据任务的最大并发执行个数。'
variation = 'TikvConfig.cdc.incremental-scan-concurrency'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.cdc.incremental-scan-concurrency"
begin
    if ToString(TikvConfig.GetValueByTagPath("cdc.incremental-scan-concurrency")) == "6" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '6'

[[rule]]
id = 2158
name = 'TikvConfig.resolved-ts.enable'
description = '是否为所有 Region 维护 Resolved TS'
variation = 'TikvConfig.resolved-ts.enable'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.resolved-ts.enable"
begin
    if ToBool(TikvConfig.GetValueByTagPath("resolved-ts.enable")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2159
name = 'TikvConfig.resolved-ts.advance-ts-interval'
description = '定期推进 Resolved TS 的时间间隔。'
variation = 'TikvConfig.resolved-ts.advance-ts-interval'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.resolved-ts.advance-ts-interval"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("resolved-ts.advance-ts-interval")), "1s") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1s'

[[rule]]
id = 2160
name = 'TikvConfig.resolved-ts.scan-lock-pool-size'
description = '初始化 Resolved TS 时 TiKV 扫描 MVCC（多版本并发控制）锁数据的线程个数。'
variation = 'TikvConfig.resolved-ts.scan-lock-pool-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.resolved-ts.scan-lock-pool-size"
begin
    if ToString(TikvConfig.GetValueByTagPath("resolved-ts.scan-lock-pool-size")) == "2" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '2'

[[rule]]
id = 2161
name = 'TikvConfig.pessimistic-txn.wait-for-lock-timeout'
description = '悲观事务在 TiKV 中等待其他事务释放锁的最长时间。若超时则会返回错误给 TiDB 并由 TiDB 重试加锁，语句最长等锁时间由 innodb_lock_wait_timeout 控制。'
variation = 'TikvConfig.pessimistic-txn.wait-for-lock-timeout'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.pessimistic-txn.wait-for-lock-timeout"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("pessimistic-txn.wait-for-lock-timeout")), "1s") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1s'

[[rule]]
id = 2162
name = 'TikvConfig.pessimistic-txn.wake-up-delay-duration'
description = '悲观事务释放锁时，只会唤醒等锁事务中 start_ts 最小的事务，其他事务将会延迟 wake-up-delay-duration 之后被唤醒。'
variation = 'TikvConfig.pessimistic-txn.wake-up-delay-duration'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.pessimistic-txn.wake-up-delay-duration"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("pessimistic-txn.wake-up-delay-duration")), "20ms") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '20ms'

[[rule]]
id = 2163
name = 'TikvConfig.pessimistic-txn.pipelined'
description = '开启流水线式加悲观锁流程。开启该功能后，TiKV 在检测数据满足加锁要求后，立刻通知 TiDB 执行后面的请求，并异步写入悲观锁，从而降低大部分延迟，显著提升悲观事务的性能。但有较低概率出现悲观锁异步写入失败的情况，可能会导致悲观事务提交失败。'
variation = 'TikvConfig.pessimistic-txn.pipelined'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.pessimistic-txn.pipelined"
begin
    if ToBool(TikvConfig.GetValueByTagPath("pessimistic-txn.pipelined")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2164
name = 'TikvConfig.rocksdb.defaultcf.titan.min-blob-size'
description = '最小存储在 Blob 文件中 value 大小，低于该值的 value 还是存在 LSM-Tree 中。'
variation = 'TikvConfig.rocksdb.defaultcf.titan.min-blob-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.titan.min-blob-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.titan.min-blob-size")), "1KB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1KB'

[[rule]]
id = 2165
name = 'TikvConfig.rocksdb.defaultcf.titan.blob-file-compression'
description = 'Blob 文件所使用的压缩算法，可选值：no、snappy、zlib、bz2、lz4、lz4hc、zstd。'
variation = 'TikvConfig.rocksdb.defaultcf.titan.blob-file-compression'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.titan.blob-file-compression"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.titan.blob-file-compression")) == "lz4" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'lz4'


#TODO
[[rule]]
id = 2166
name = 'TikvConfig.rocksdb.defaultcf.titan.blob-cache-size'
description = 'Blob 文件的 cache 大小，默认：0GB。'
variation = 'TikvConfig.rocksdb.defaultcf.titan.blob-cache-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.titan.blob-cache-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.titan.blob-cache-size")), "0GB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0GB'

[[rule]]
id = 2167
name = 'TikvConfig.rocksdb.defaultcf.titan.min-gc-batch-size'
description = '做一次 GC 所要求的最低 Blob 文件大小总和。'
variation = 'TikvConfig.rocksdb.defaultcf.titan.min-gc-batch-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.titan.min-gc-batch-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.titan.min-gc-batch-size")), "16MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '16MB'

[[rule]]
id = 2168
name = 'TikvConfig.rocksdb.defaultcf.titan.max-gc-batch-size'
description = '做一次 GC 所要求的最高 Blob 文件大小总和。'
variation = 'TikvConfig.rocksdb.defaultcf.titan.max-gc-batch-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.titan.max-gc-batch-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.titan.max-gc-batch-size")), "64MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '64MB'

#TODO
[[rule]]
id = 2169
name = 'TikvConfig.rocksdb.defaultcf.titan.discardable-ratio'
description = 'Blob 文件 GC 的触发比例，如果某 Blob 文件中的失效 value 的比例高于该值才可能被 GC 选中。'
variation = 'TikvConfig.rocksdb.defaultcf.titan.discardable-ratio'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.titan.discardable-ratio"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.titan.discardable-ratio")) == "0.5" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0.5'

[[rule]]
id = 2170
name = 'TikvConfig.rocksdb.defaultcf.titan.sample-ratio'
description = '进行 GC 时，对 Blob 文件进行采样时读取数据占整个文件的比例。'
variation = 'TikvConfig.rocksdb.defaultcf.titan.sample-ratio'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.titan.sample-ratio"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.titan.sample-ratio")) == "0.1" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0.1'

[[rule]]
id = 2171
name = 'TikvConfig.rocksdb.defaultcf.titan.merge-small-file-threshold'
description = 'Blob 文件的大小小于该值时，无视 discardable-ratio 仍可能被 GC 选中。'
variation = 'TikvConfig.rocksdb.defaultcf.titan.merge-small-file-threshold'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.titan.merge-small-file-threshold"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.titan.merge-small-file-threshold")), "8MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '8MB'

[[rule]]
id = 2172
name = 'TikvConfig.rocksdb.defaultcf.titan.blob-run-mode'
description = 'Titan 的运行模式选择，可选值： "normal"：value size 超过 min-blob-size 的数据会写入到 blob 文件。 "read_only"：不再写入新数据到 blob，原有 blob 内的数据仍然可以读取。 "fallback"：将 blob 内的数据写回 LSM。'
variation = 'TikvConfig.rocksdb.defaultcf.titan.blob-run-mode'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.titan.blob-run-mode"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.titan.blob-run-mode")) == "normal" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'normal'

[[rule]]
id = 2173
name = 'TikvConfig.rocksdb.defaultcf.titan.level-merge'
description = '是否通过开启 level-merge 来提升读性能，副作用是写放大会比不开启更大。'
variation = 'TikvConfig.rocksdb.defaultcf.titan.level-merge'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.titan.level-merge"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.titan.level-merge")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2174
name = 'TikvConfig.rocksdb.defaultcf.titan.gc-merge-rewrite'
description = '是否开启使用 merge operator 来进行 Titan GC 写回操作，减少 Titan GC 对于前台写入的影响。'
variation = 'TikvConfig.rocksdb.defaultcf.titan.gc-merge-rewrite'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.titan.gc-merge-rewrite"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.titan.gc-merge-rewrite")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2175
name = 'TikvConfig.rocksdb.defaultcf.block-size'
description = '一个 RocksDB block 的默认大小。'
variation = 'TikvConfig.rocksdb.defaultcf.block-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.block-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.block-size")), "64KB") ==0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '64KB'

[[rule]]
id = 2177
name = 'TikvConfig.rocksdb.defaultcf.disable-block-cache'
description = '开启 block cache 开关。'
variation = 'TikvConfig.rocksdb.defaultcf.disable-block-cache'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.disable-block-cache"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.disable-block-cache")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2178
name = 'TikvConfig.rocksdb.defaultcf.cache-index-and-filter-blocks'
description = '开启缓存 index 和 filter 的开关。'
variation = 'TikvConfig.rocksdb.defaultcf.cache-index-and-filter-blocks'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.cache-index-and-filter-blocks"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.cache-index-and-filter-blocks")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2179
name = 'TikvConfig.rocksdb.defaultcf.pin-l0-filter-and-index-blocks'
description = '是否 pin 住 L0 的 index 和 filter。'
variation = 'TikvConfig.rocksdb.defaultcf.pin-l0-filter-and-index-blocks'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.pin-l0-filter-and-index-blocks"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.pin-l0-filter-and-index-blocks")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2180
name = 'TikvConfig.rocksdb.defaultcf.use-bloom-filter'
description = '开启 bloom filter 的开关。'
variation = 'TikvConfig.rocksdb.defaultcf.use-bloom-filter'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.use-bloom-filter"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.use-bloom-filter")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2181
name = 'TikvConfig.rocksdb.defaultcf.optimize-filters-for-hits'
description = '开启优化 filter 的命中率的开关。'
variation = 'TikvConfig.rocksdb.defaultcf.optimize-filters-for-hits'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.optimize-filters-for-hits"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.optimize-filters-for-hits")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2182
name = 'TikvConfig.rocksdb.defaultcf.whole-key-filtering'
description = '开启将整个 key 放到 bloom filter 中的开关。'
variation = 'TikvConfig.rocksdb.defaultcf.whole-key-filtering'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.whole-key-filtering"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.whole-key-filtering")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2183
name = 'TikvConfig.rocksdb.defaultcf.bloom-filter-bits-per-key'
description = 'bloom filter 为每个 key 预留的长度，单位 Byte'
variation = 'TikvConfig.rocksdb.defaultcf.bloom-filter-bits-per-key'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.bloom-filter-bits-per-key"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.bloom-filter-bits-per-key")) == "10" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10'

[[rule]]
id = 2184
name = 'TikvConfig.rocksdb.defaultcf.block-based-bloom-filter'
description = '开启每个 block 建立 bloom filter 的开关。'
variation = 'TikvConfig.rocksdb.defaultcf.block-based-bloom-filter'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.block-based-bloom-filter"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.block-based-bloom-filter")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2185
name = 'TikvConfig.rocksdb.defaultcf.read-amp-bytes-per-bit'
description = '开启读放大统计的开关，0：不开启，> 0 开启。'
variation = 'TikvConfig.rocksdb.defaultcf.read-amp-bytes-per-bit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.read-amp-bytes-per-bit"
begin
    if ToInt(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.read-amp-bytes-per-bit")) == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0'

[[rule]]
id = 2186
name = 'TikvConfig.rocksdb.defaultcf.compression-per-level'
description = '每一层默认压缩算法，默认：前两层为 No，后面 5 层为 lz4。'
variation = 'TikvConfig.rocksdb.defaultcf.compression-per-level'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.compression-per-level"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.compression-per-level")) == "no,no,lz4,lz4,lz4,zstd,zstd" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '["no", "no", "lz4", "lz4", "lz4", "zstd", "zstd"]'

[[rule]]
id = 2187
name = 'TikvConfig.rocksdb.defaultcf.bottommost-level-compression'
description = '设置最底层的压缩算法。该设置将覆盖 compression-per-level 的设置。'
variation = 'TikvConfig.rocksdb.defaultcf.bottommost-level-compression'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.bottommost-level-compression"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.bottommost-level-compression")) == "zstd" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'zstd'

[[rule]]
id = 2188
name = 'TikvConfig.rocksdb.defaultcf.write-buffer-size'
description = 'memtable 大小。'
variation = 'TikvConfig.rocksdb.defaultcf.write-buffer-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.write-buffer-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.write-buffer-size")), "128MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '128MB'

[[rule]]
id = 2189
name = 'TikvConfig.rocksdb.defaultcf.max-write-buffer-number'
description = '最大 memtable 个数。'
variation = 'TikvConfig.rocksdb.defaultcf.max-write-buffer-number'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.max-write-buffer-number"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.max-write-buffer-number")) == "5" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '5'

[[rule]]
id = 2190
name = 'TikvConfig.rocksdb.defaultcf.min-write-buffer-number-to-merge'
description = '触发 flush 的最小 memtable 个数。'
variation = 'TikvConfig.rocksdb.defaultcf.min-write-buffer-number-to-merge'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.min-write-buffer-number-to-merge"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.min-write-buffer-number-to-merge")) == "1" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1'

[[rule]]
id = 2191
name = 'TikvConfig.rocksdb.defaultcf.max-bytes-for-level-base'
description = 'base level (L1) 最大字节数，一般设置为 memtable 大小 4 倍。'
variation = 'TikvConfig.rocksdb.defaultcf.max-bytes-for-level-base'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.max-bytes-for-level-base"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.max-bytes-for-level-base")), "512MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '512MB'

[[rule]]
id = 2192
name = 'TikvConfig.rocksdb.defaultcf.target-file-size-base'
description = 'base level 的目标文件大小。当 enable-compaction-guard 的值为 true 时，compaction-guard-max-output-file-size 会覆盖此配置。'
variation = 'TikvConfig.rocksdb.defaultcf.target-file-size-base'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.target-file-size-base"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.target-file-size-base")), "8MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '8MB'

[[rule]]
id = 2193
name = 'TikvConfig.rocksdb.defaultcf.level0-file-num-compaction-trigger'
description = '触发 compaction 的 L0 文件最大个数。'
variation = 'TikvConfig.rocksdb.defaultcf.level0-file-num-compaction-trigger'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.level0-file-num-compaction-trigger"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.level0-file-num-compaction-trigger")) == "4" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '4'

[[rule]]
id = 2194
name = 'TikvConfig.rocksdb.defaultcf.level0-slowdown-writes-trigger'
description = '触发 write stall 的 L0 文件最大个数。'
variation = 'TikvConfig.rocksdb.defaultcf.level0-slowdown-writes-trigger'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.level0-slowdown-writes-trigger"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.level0-slowdown-writes-trigger")) == "20" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '20'

[[rule]]
id = 2195
name = 'TikvConfig.rocksdb.defaultcf.level0-stop-writes-trigger'
description = '完全阻停写入的 L0 文件最大个数。'
variation = 'TikvConfig.rocksdb.defaultcf.level0-stop-writes-trigger'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.level0-stop-writes-trigger"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.level0-stop-writes-trigger")) == "36" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '36'

[[rule]]
id = 2196
name = 'TikvConfig.rocksdb.defaultcf.max-compaction-bytes'
description = '一次 compaction 最大写入字节数，默认 2GB。'
variation = 'TikvConfig.rocksdb.defaultcf.max-compaction-bytes'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.max-compaction-bytes"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.max-compaction-bytes")), "2GB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '2GB'

[[rule]]
id = 2197
name = 'TikvConfig.rocksdb.defaultcf.compaction-pri'
description = 'Compaction 优先类型 可选择值：0 (ByCompensatedSize)，1 (OldestLargestSeqFirst)，2 (OldestSmallestSeqFirst)，3 (MinOverlappingRatio)。'
variation = 'TikvConfig.rocksdb.defaultcf.compaction-pri'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.compaction-pri"
begin
    if ToInt(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.compaction-pri")) == 3 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '3'

[[rule]]
id = 2198
name = 'TikvConfig.rocksdb.defaultcf.dynamic-level-bytes'
description = '开启 dynamic level bytes 优化的开关。'
variation = 'TikvConfig.rocksdb.defaultcf.dynamic-level-bytes'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.dynamic-level-bytes"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.dynamic-level-bytes")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2199
name = 'TikvConfig.rocksdb.defaultcf.num-levels'
description = 'RocksDB 文件最大层数。'
variation = 'TikvConfig.rocksdb.defaultcf.num-levels'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.num-levels"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.num-levels")) == "7" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '7'

[[rule]]
id = 2200
name = 'TikvConfig.rocksdb.defaultcf.max-bytes-for-level-multiplier'
description = '每一层的默认放大倍数。'
variation = 'TikvConfig.rocksdb.defaultcf.max-bytes-for-level-multiplier'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.max-bytes-for-level-multiplier"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.max-bytes-for-level-multiplier")) == "10" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10'

[[rule]]
id = 2201
name = 'TikvConfig.rocksdb.defaultcf.compaction-style'
description = 'Compaction 方法，可选值为 level，universal。'
variation = 'TikvConfig.rocksdb.defaultcf.compaction-style'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.compaction-style"
begin
    if ToInt(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.compaction-style")) == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'level'

[[rule]]
id = 2202
name = 'TikvConfig.rocksdb.defaultcf.disable-auto-compactions'
description = '开启自动 compaction 的开关。'
variation = 'TikvConfig.rocksdb.defaultcf.disable-auto-compactions'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.disable-auto-compactions"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.disable-auto-compactions")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2203
name = 'TikvConfig.rocksdb.defaultcf.soft-pending-compaction-bytes-limit'
description = 'pending compaction bytes 的软限制。'
variation = 'TikvConfig.rocksdb.defaultcf.soft-pending-compaction-bytes-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.soft-pending-compaction-bytes-limit"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.soft-pending-compaction-bytes-limit")), "192GB") ==0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '192GB'

[[rule]]
id = 2204
name = 'TikvConfig.rocksdb.defaultcf.hard-pending-compaction-bytes-limit'
description = 'pending compaction bytes 的硬限制。'
variation = 'TikvConfig.rocksdb.defaultcf.hard-pending-compaction-bytes-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.hard-pending-compaction-bytes-limit"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.hard-pending-compaction-bytes-limit")), "256GB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '256GB'

[[rule]]
id = 2205
name = 'TikvConfig.rocksdb.defaultcf.enable-compaction-guard'
description = '设置 compaction guard 的启用状态。compaction guard 优化通过使用 TiKV Region 边界分割 SST 文件，帮助降低 compaction I/O，让 TiKV 能够输出较大的 SST 文件，并且在迁移 Region 时及时清理过期数据。'
variation = 'TikvConfig.rocksdb.defaultcf.enable-compaction-guard'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.enable-compaction-guard"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.enable-compaction-guard")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2206
name = 'TikvConfig.rocksdb.defaultcf.compaction-guard-min-output-file-size'
description = '设置 compaction guard 启用时 SST 文件大小的最小值，防止 SST 文件过小。'
variation = 'TikvConfig.rocksdb.defaultcf.compaction-guard-min-output-file-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.compaction-guard-min-output-file-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.compaction-guard-min-output-file-size")), "8MB") ==0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '8MB'

[[rule]]
id = 2207
name = 'TikvConfig.rocksdb.defaultcf.compaction-guard-max-output-file-size'
description = '设置 compaction guard 启用时 SST 文件大小的最大值，防止 SST 文件过大。对于同一列族，此配置项的值会覆盖 target-file-size-base。'
variation = 'TikvConfig.rocksdb.defaultcf.compaction-guard-max-output-file-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.defaultcf.compaction-guard-max-output-file-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.defaultcf.compaction-guard-max-output-file-size")), "128MB") ==0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '128MB'

[[rule]]
id = 2208
name = 'TikvConfig.rocksdb.writecf.block-size'
description = '一个 RocksDB block 的默认大小。'
variation = 'TikvConfig.rocksdb.writecf.block-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.block-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.writecf.block-size")), "64KB") ==0  {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '64KB'

[[rule]]
id = 2210
name = 'TikvConfig.rocksdb.writecf.disable-block-cache'
description = '开启 block cache 开关。'
variation = 'TikvConfig.rocksdb.writecf.disable-block-cache'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.disable-block-cache"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.writecf.disable-block-cache")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2211
name = 'TikvConfig.rocksdb.writecf.cache-index-and-filter-blocks'
description = '开启缓存 index 和 filter 的开关。'
variation = 'TikvConfig.rocksdb.writecf.cache-index-and-filter-blocks'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.cache-index-and-filter-blocks"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.writecf.cache-index-and-filter-blocks")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2212
name = 'TikvConfig.rocksdb.writecf.pin-l0-filter-and-index-blocks'
description = '是否 pin 住 L0 的 index 和 filter。'
variation = 'TikvConfig.rocksdb.writecf.pin-l0-filter-and-index-blocks'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.pin-l0-filter-and-index-blocks"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.writecf.pin-l0-filter-and-index-blocks")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2213
name = 'TikvConfig.rocksdb.writecf.use-bloom-filter'
description = '开启 bloom filter 的开关。'
variation = 'TikvConfig.rocksdb.writecf.use-bloom-filter'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.use-bloom-filter"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.writecf.use-bloom-filter")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2214
name = 'TikvConfig.rocksdb.writecf.optimize-filters-for-hits'
description = '开启优化 filter 的命中率的开关。'
variation = 'TikvConfig.rocksdb.writecf.optimize-filters-for-hits'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.optimize-filters-for-hits"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.writecf.optimize-filters-for-hits")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2215
name = 'TikvConfig.rocksdb.writecf.whole-key-filtering'
description = '开启将整个 key 放到 bloom filter 中的开关。'
variation = 'TikvConfig.rocksdb.writecf.whole-key-filtering'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.whole-key-filtering"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.writecf.whole-key-filtering")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2216
name = 'TikvConfig.rocksdb.writecf.bloom-filter-bits-per-key'
description = 'bloom filter 为每个 key 预留的长度，单位 Byte'
variation = 'TikvConfig.rocksdb.writecf.bloom-filter-bits-per-key'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.bloom-filter-bits-per-key"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.writecf.bloom-filter-bits-per-key")) == "10" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10'

[[rule]]
id = 2217
name = 'TikvConfig.rocksdb.writecf.block-based-bloom-filter'
description = '开启每个 block 建立 bloom filter 的开关。'
variation = 'TikvConfig.rocksdb.writecf.block-based-bloom-filter'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.block-based-bloom-filter"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.writecf.block-based-bloom-filter")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2218
name = 'TikvConfig.rocksdb.writecf.read-amp-bytes-per-bit'
description = '开启读放大统计的开关，0：不开启，> 0 开启。'
variation = 'TikvConfig.rocksdb.writecf.read-amp-bytes-per-bit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.read-amp-bytes-per-bit"
begin
    if ToInt(TikvConfig.GetValueByTagPath("rocksdb.writecf.read-amp-bytes-per-bit")) == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0'

[[rule]]
id = 2219
name = 'TikvConfig.rocksdb.writecf.compression-per-level'
description = '每一层默认压缩算法，默认：前两层为 No，后面 5 层为 lz4。'
variation = 'TikvConfig.rocksdb.writecf.compression-per-level'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.compression-per-level"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.writecf.compression-per-level")) == "no,no,lz4,lz4,lz4,zstd,zstd" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '["no", "no", "lz4", "lz4", "lz4", "zstd", "zstd"]'

[[rule]]
id = 2220
name = 'TikvConfig.rocksdb.writecf.bottommost-level-compression'
description = '设置最底层的压缩算法。该设置将覆盖 compression-per-level 的设置。'
variation = 'TikvConfig.rocksdb.writecf.bottommost-level-compression'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.bottommost-level-compression"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.writecf.bottommost-level-compression")) == "zstd" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'zstd'

[[rule]]
id = 2221
name = 'TikvConfig.rocksdb.writecf.write-buffer-size'
description = 'memtable 大小。'
variation = 'TikvConfig.rocksdb.writecf.write-buffer-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.write-buffer-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.writecf.write-buffer-size")), "128MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '128MB'

[[rule]]
id = 2222
name = 'TikvConfig.rocksdb.writecf.max-write-buffer-number'
description = '最大 memtable 个数。'
variation = 'TikvConfig.rocksdb.writecf.max-write-buffer-number'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.max-write-buffer-number"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.writecf.max-write-buffer-number")) == "5" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '5'

[[rule]]
id = 2223
name = 'TikvConfig.rocksdb.writecf.min-write-buffer-number-to-merge'
description = '触发 flush 的最小 memtable 个数。'
variation = 'TikvConfig.rocksdb.writecf.min-write-buffer-number-to-merge'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.min-write-buffer-number-to-merge"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.writecf.min-write-buffer-number-to-merge")) == "1" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1'

[[rule]]
id = 2224
name = 'TikvConfig.rocksdb.writecf.max-bytes-for-level-base'
description = 'base level (L1) 最大字节数，一般设置为 memtable 大小 4 倍。'
variation = 'TikvConfig.rocksdb.writecf.max-bytes-for-level-base'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.max-bytes-for-level-base"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.writecf.max-bytes-for-level-base")), "512MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '512MB'

[[rule]]
id = 2225
name = 'TikvConfig.rocksdb.writecf.target-file-size-base'
description = 'base level 的目标文件大小。当 enable-compaction-guard 的值为 true 时，compaction-guard-max-output-file-size 会覆盖此配置。'
variation = 'TikvConfig.rocksdb.writecf.target-file-size-base'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.target-file-size-base"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.writecf.target-file-size-base")), "8MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '8MB'

[[rule]]
id = 2226
name = 'TikvConfig.rocksdb.writecf.level0-file-num-compaction-trigger'
description = '触发 compaction 的 L0 文件最大个数。'
variation = 'TikvConfig.rocksdb.writecf.level0-file-num-compaction-trigger'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.level0-file-num-compaction-trigger"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.writecf.level0-file-num-compaction-trigger")) == "4" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '4'

[[rule]]
id = 2227
name = 'TikvConfig.rocksdb.writecf.level0-slowdown-writes-trigger'
description = '触发 write stall 的 L0 文件最大个数。'
variation = 'TikvConfig.rocksdb.writecf.level0-slowdown-writes-trigger'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.level0-slowdown-writes-trigger"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.writecf.level0-slowdown-writes-trigger")) == "20" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '20'

[[rule]]
id = 2228
name = 'TikvConfig.rocksdb.writecf.level0-stop-writes-trigger'
description = '完全阻停写入的 L0 文件最大个数。'
variation = 'TikvConfig.rocksdb.writecf.level0-stop-writes-trigger'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.level0-stop-writes-trigger"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.writecf.level0-stop-writes-trigger")) == "36" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '36'

[[rule]]
id = 2229
name = 'TikvConfig.rocksdb.writecf.max-compaction-bytes'
description = '一次 compaction 最大写入字节数，默认 2GB。'
variation = 'TikvConfig.rocksdb.writecf.max-compaction-bytes'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.max-compaction-bytes"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.writecf.max-compaction-bytes")), "2GB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '2GB'

[[rule]]
id = 2230
name = 'TikvConfig.rocksdb.writecf.compaction-pri'
description = 'Compaction 优先类型 可选择值：0 (ByCompensatedSize)，1 (OldestLargestSeqFirst)，2 (OldestSmallestSeqFirst)，3 (MinOverlappingRatio)。'
variation = 'TikvConfig.rocksdb.writecf.compaction-pri'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.compaction-pri"
begin
    if ToInt(TikvConfig.GetValueByTagPath("rocksdb.writecf.compaction-pri")) == 3 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '3'

[[rule]]
id = 2231
name = 'TikvConfig.rocksdb.writecf.dynamic-level-bytes'
description = '开启 dynamic level bytes 优化的开关。'
variation = 'TikvConfig.rocksdb.writecf.dynamic-level-bytes'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.dynamic-level-bytes"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.writecf.dynamic-level-bytes")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2232
name = 'TikvConfig.rocksdb.writecf.num-levels'
description = 'RocksDB 文件最大层数。'
variation = 'TikvConfig.rocksdb.writecf.num-levels'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.num-levels"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.writecf.num-levels")) == "7" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '7'

[[rule]]
id = 2233
name = 'TikvConfig.rocksdb.writecf.max-bytes-for-level-multiplier'
description = '每一层的默认放大倍数。'
variation = 'TikvConfig.rocksdb.writecf.max-bytes-for-level-multiplier'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.max-bytes-for-level-multiplier"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.writecf.max-bytes-for-level-multiplier")) == "10" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10'

[[rule]]
id = 2234
name = 'TikvConfig.rocksdb.writecf.compaction-style'
description = 'Compaction 方法，可选值为 level，universal。'
variation = 'TikvConfig.rocksdb.writecf.compaction-style'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.compaction-style"
begin
    if ToInt(TikvConfig.GetValueByTagPath("rocksdb.writecf.compaction-style")) == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'level'

[[rule]]
id = 2235
name = 'TikvConfig.rocksdb.writecf.disable-auto-compactions'
description = '开启自动 compaction 的开关。'
variation = 'TikvConfig.rocksdb.writecf.disable-auto-compactions'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.disable-auto-compactions"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.writecf.disable-auto-compactions")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2236
name = 'TikvConfig.rocksdb.writecf.soft-pending-compaction-bytes-limit'
description = 'pending compaction bytes 的软限制。'
variation = 'TikvConfig.rocksdb.writecf.soft-pending-compaction-bytes-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.soft-pending-compaction-bytes-limit"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.writecf.soft-pending-compaction-bytes-limit")), "192GB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '192GB'

[[rule]]
id = 2237
name = 'TikvConfig.rocksdb.writecf.hard-pending-compaction-bytes-limit'
description = 'pending compaction bytes 的硬限制。'
variation = 'TikvConfig.rocksdb.writecf.hard-pending-compaction-bytes-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.hard-pending-compaction-bytes-limit"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.writecf.hard-pending-compaction-bytes-limit")), "256GB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '256GB'

[[rule]]
id = 2238
name = 'TikvConfig.rocksdb.writecf.enable-compaction-guard'
description = '设置 compaction guard 的启用状态。compaction guard 优化通过使用 TiKV Region 边界分割 SST 文件，帮助降低 compaction I/O，让 TiKV 能够输出较大的 SST 文件，并且在迁移 Region 时及时清理过期数据。'
variation = 'TikvConfig.rocksdb.writecf.enable-compaction-guard'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.enable-compaction-guard"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.writecf.enable-compaction-guard")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2239
name = 'TikvConfig.rocksdb.writecf.compaction-guard-min-output-file-size'
description = '设置 compaction guard 启用时 SST 文件大小的最小值，防止 SST 文件过小。'
variation = 'TikvConfig.rocksdb.writecf.compaction-guard-min-output-file-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.compaction-guard-min-output-file-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.writecf.compaction-guard-min-output-file-size")), "8MB") ==0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '8MB'

[[rule]]
id = 2240
name = 'TikvConfig.rocksdb.writecf.compaction-guard-max-output-file-size'
description = '设置 compaction guard 启用时 SST 文件大小的最大值，防止 SST 文件过大。对于同一列族，此配置项的值会覆盖 target-file-size-base。'
variation = 'TikvConfig.rocksdb.writecf.compaction-guard-max-output-file-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.writecf.compaction-guard-max-output-file-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.writecf.compaction-guard-max-output-file-size")), "128MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '128MB'

[[rule]]
id = 2241
name = 'TikvConfig.rocksdb.lockcf.block-size'
description = '一个 RocksDB block 的默认大小。'
variation = 'TikvConfig.rocksdb.lockcf.block-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.block-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.lockcf.block-size")), "16KB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '16KB'

[[rule]]
id = 2243
name = 'TikvConfig.rocksdb.lockcf.disable-block-cache'
description = '开启 block cache 开关。'
variation = 'TikvConfig.rocksdb.lockcf.disable-block-cache'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.disable-block-cache"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.lockcf.disable-block-cache")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2244
name = 'TikvConfig.rocksdb.lockcf.cache-index-and-filter-blocks'
description = '开启缓存 index 和 filter 的开关。'
variation = 'TikvConfig.rocksdb.lockcf.cache-index-and-filter-blocks'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.cache-index-and-filter-blocks"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.lockcf.cache-index-and-filter-blocks")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2245
name = 'TikvConfig.rocksdb.lockcf.pin-l0-filter-and-index-blocks'
description = '是否 pin 住 L0 的 index 和 filter。'
variation = 'TikvConfig.rocksdb.lockcf.pin-l0-filter-and-index-blocks'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.pin-l0-filter-and-index-blocks"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.lockcf.pin-l0-filter-and-index-blocks")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2246
name = 'TikvConfig.rocksdb.lockcf.use-bloom-filter'
description = '开启 bloom filter 的开关。'
variation = 'TikvConfig.rocksdb.lockcf.use-bloom-filter'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.use-bloom-filter"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.lockcf.use-bloom-filter")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2247
name = 'TikvConfig.rocksdb.lockcf.optimize-filters-for-hits'
description = '开启优化 filter 的命中率的开关。'
variation = 'TikvConfig.rocksdb.lockcf.optimize-filters-for-hits'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.optimize-filters-for-hits"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.lockcf.optimize-filters-for-hits")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2248
name = 'TikvConfig.rocksdb.lockcf.whole-key-filtering'
description = '开启将整个 key 放到 bloom filter 中的开关。'
variation = 'TikvConfig.rocksdb.lockcf.whole-key-filtering'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.whole-key-filtering"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.lockcf.whole-key-filtering")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2249
name = 'TikvConfig.rocksdb.lockcf.bloom-filter-bits-per-key'
description = 'bloom filter 为每个 key 预留的长度，单位 Byte'
variation = 'TikvConfig.rocksdb.lockcf.bloom-filter-bits-per-key'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.bloom-filter-bits-per-key"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.lockcf.bloom-filter-bits-per-key")) == "10" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10'

[[rule]]
id = 2250
name = 'TikvConfig.rocksdb.lockcf.block-based-bloom-filter'
description = '开启每个 block 建立 bloom filter 的开关。'
variation = 'TikvConfig.rocksdb.lockcf.block-based-bloom-filter'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.block-based-bloom-filter"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.lockcf.block-based-bloom-filter")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2251
name = 'TikvConfig.rocksdb.lockcf.read-amp-bytes-per-bit'
description = '开启读放大统计的开关，0：不开启，> 0 开启。'
variation = 'TikvConfig.rocksdb.lockcf.read-amp-bytes-per-bit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.read-amp-bytes-per-bit"
begin
    if ToInt(TikvConfig.GetValueByTagPath("rocksdb.lockcf.read-amp-bytes-per-bit")) == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0'

[[rule]]
id = 2252
name = 'TikvConfig.rocksdb.lockcf.compression-per-level'
description = '每一层默认压缩算法，默认：前两层为 No，后面 5 层为 lz4。'
variation = 'TikvConfig.rocksdb.lockcf.compression-per-level'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.compression-per-level"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.lockcf.compression-per-level")) == "no,no,no,no,no,no,no" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '["no", "no", "lz4", "lz4", "lz4", "zstd", "zstd"]'

[[rule]]
id = 2253
name = 'TikvConfig.rocksdb.lockcf.bottommost-level-compression'
description = '设置最底层的压缩算法。该设置将覆盖 compression-per-level 的设置。'
variation = 'TikvConfig.rocksdb.lockcf.bottommost-level-compression'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.bottommost-level-compression"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.lockcf.bottommost-level-compression")) == "disable" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'zstd'

[[rule]]
id = 2254
name = 'TikvConfig.rocksdb.lockcf.write-buffer-size'
description = 'memtable 大小。'
variation = 'TikvConfig.rocksdb.lockcf.write-buffer-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.write-buffer-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.lockcf.write-buffer-size")), "32MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '32MB'

[[rule]]
id = 2255
name = 'TikvConfig.rocksdb.lockcf.max-write-buffer-number'
description = '最大 memtable 个数。'
variation = 'TikvConfig.rocksdb.lockcf.max-write-buffer-number'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.max-write-buffer-number"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.lockcf.max-write-buffer-number")) == "5" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '5'

[[rule]]
id = 2256
name = 'TikvConfig.rocksdb.lockcf.min-write-buffer-number-to-merge'
description = '触发 flush 的最小 memtable 个数。'
variation = 'TikvConfig.rocksdb.lockcf.min-write-buffer-number-to-merge'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.min-write-buffer-number-to-merge"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.lockcf.min-write-buffer-number-to-merge")) == "1" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1'

[[rule]]
id = 2257
name = 'TikvConfig.rocksdb.lockcf.max-bytes-for-level-base'
description = 'base level (L1) 最大字节数，一般设置为 memtable 大小 4 倍。'
variation = 'TikvConfig.rocksdb.lockcf.max-bytes-for-level-base'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.max-bytes-for-level-base"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.lockcf.max-bytes-for-level-base")), "128MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '128MB'

[[rule]]
id = 2258
name = 'TikvConfig.rocksdb.lockcf.target-file-size-base'
description = 'base level 的目标文件大小。当 enable-compaction-guard 的值为 true 时，compaction-guard-max-output-file-size 会覆盖此配置。'
variation = 'TikvConfig.rocksdb.lockcf.target-file-size-base'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.target-file-size-base"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.lockcf.target-file-size-base")), "8MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '8MB'

[[rule]]
id = 2259
name = 'TikvConfig.rocksdb.lockcf.level0-file-num-compaction-trigger'
description = '触发 compaction 的 L0 文件最大个数。'
variation = 'TikvConfig.rocksdb.lockcf.level0-file-num-compaction-trigger'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.level0-file-num-compaction-trigger"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.lockcf.level0-file-num-compaction-trigger")) == "1" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1'

[[rule]]
id = 2260
name = 'TikvConfig.rocksdb.lockcf.level0-slowdown-writes-trigger'
description = '触发 write stall 的 L0 文件最大个数。'
variation = 'TikvConfig.rocksdb.lockcf.level0-slowdown-writes-trigger'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.level0-slowdown-writes-trigger"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.lockcf.level0-slowdown-writes-trigger")) == "20" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '20'

[[rule]]
id = 2261
name = 'TikvConfig.rocksdb.lockcf.level0-stop-writes-trigger'
description = '完全阻停写入的 L0 文件最大个数。'
variation = 'TikvConfig.rocksdb.lockcf.level0-stop-writes-trigger'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.level0-stop-writes-trigger"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.lockcf.level0-stop-writes-trigger")) == "36" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '36'

[[rule]]
id = 2262
name = 'TikvConfig.rocksdb.lockcf.max-compaction-bytes'
description = '一次 compaction 最大写入字节数，默认 2GB。'
variation = 'TikvConfig.rocksdb.lockcf.max-compaction-bytes'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.max-compaction-bytes"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.lockcf.max-compaction-bytes")), "2GB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '2GB'

[[rule]]
id = 2263
name = 'TikvConfig.rocksdb.lockcf.compaction-pri'
description = 'Compaction 优先类型 可选择值：0 (ByCompensatedSize)，1 (OldestLargestSeqFirst)，2 (OldestSmallestSeqFirst)，3 (MinOverlappingRatio)。'
variation = 'TikvConfig.rocksdb.lockcf.compaction-pri'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.compaction-pri"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.lockcf.compaction-pri")) == "0"{
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1'

[[rule]]
id = 2264
name = 'TikvConfig.rocksdb.lockcf.dynamic-level-bytes'
description = '开启 dynamic level bytes 优化的开关。'
variation = 'TikvConfig.rocksdb.lockcf.dynamic-level-bytes'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.dynamic-level-bytes"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.lockcf.dynamic-level-bytes")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 2265
name = 'TikvConfig.rocksdb.lockcf.num-levels'
description = 'RocksDB 文件最大层数。'
variation = 'TikvConfig.rocksdb.lockcf.num-levels'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.num-levels"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.lockcf.num-levels")) == "7" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '7'

[[rule]]
id = 2266
name = 'TikvConfig.rocksdb.lockcf.max-bytes-for-level-multiplier'
description = '每一层的默认放大倍数。'
variation = 'TikvConfig.rocksdb.lockcf.max-bytes-for-level-multiplier'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.max-bytes-for-level-multiplier"
begin
    if ToString(TikvConfig.GetValueByTagPath("rocksdb.lockcf.max-bytes-for-level-multiplier")) == "10" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10'

[[rule]]
id = 2267
name = 'TikvConfig.rocksdb.lockcf.compaction-style'
description = 'Compaction 方法，可选值为 level，universal。'
variation = 'TikvConfig.rocksdb.lockcf.compaction-style'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.compaction-style"
begin
    if ToInt(TikvConfig.GetValueByTagPath("rocksdb.lockcf.compaction-style")) == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'level'

[[rule]]
id = 2268
name = 'TikvConfig.rocksdb.lockcf.disable-auto-compactions'
description = '开启自动 compaction 的开关。'
variation = 'TikvConfig.rocksdb.lockcf.disable-auto-compactions'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.disable-auto-compactions"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.lockcf.disable-auto-compactions")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2269
name = 'TikvConfig.rocksdb.lockcf.soft-pending-compaction-bytes-limit'
description = 'pending compaction bytes 的软限制。'
variation = 'TikvConfig.rocksdb.lockcf.soft-pending-compaction-bytes-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.soft-pending-compaction-bytes-limit"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.lockcf.soft-pending-compaction-bytes-limit")), "192GB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '192GB'

[[rule]]
id = 2270
name = 'TikvConfig.rocksdb.lockcf.hard-pending-compaction-bytes-limit'
description = 'pending compaction bytes 的硬限制。'
variation = 'TikvConfig.rocksdb.lockcf.hard-pending-compaction-bytes-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.hard-pending-compaction-bytes-limit"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.lockcf.hard-pending-compaction-bytes-limit")), "256GB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '256GB'

[[rule]]
id = 2271
name = 'TikvConfig.rocksdb.lockcf.enable-compaction-guard'
description = '设置 compaction guard 的启用状态。compaction guard 优化通过使用 TiKV Region 边界分割 SST 文件，帮助降低 compaction I/O，让 TiKV 能够输出较大的 SST 文件，并且在迁移 Region 时及时清理过期数据。'
variation = 'TikvConfig.rocksdb.lockcf.enable-compaction-guard'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.enable-compaction-guard"
begin
    if ToBool(TikvConfig.GetValueByTagPath("rocksdb.lockcf.enable-compaction-guard")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 2272
name = 'TikvConfig.rocksdb.lockcf.compaction-guard-min-output-file-size'
description = '设置 compaction guard 启用时 SST 文件大小的最小值，防止 SST 文件过小。'
variation = 'TikvConfig.rocksdb.lockcf.compaction-guard-min-output-file-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.compaction-guard-min-output-file-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.lockcf.compaction-guard-min-output-file-size")), "8MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '8MB'

[[rule]]
id = 2273
name = 'TikvConfig.rocksdb.lockcf.compaction-guard-max-output-file-size'
description = '设置 compaction guard 启用时 SST 文件大小的最大值，防止 SST 文件过大。对于同一列族，此配置项的值会覆盖 target-file-size-base。'
variation = 'TikvConfig.rocksdb.lockcf.compaction-guard-max-output-file-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.rocksdb.lockcf.compaction-guard-max-output-file-size"
begin
    if MustCmpReadableSize(ToString(TikvConfig.GetValueByTagPath("rocksdb.lockcf.compaction-guard-max-output-file-size")), "128MB") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '128MB'

#TODO
[[rule]]
id = 2274
name = 'TikvConfig.raftstore.raftstore.peer-stale-state-check-interval'
description = '修改对 Region 的状态检查间隔时间。'
variation = 'TikvConfig.raftstore.raftstore.peer-stale-state-check-interval'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.raftstore.peer-stale-state-check-interval"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.raftstore.peer-stale-state-check-interval")), "5m") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15'
default = '5 min'

[[rule]]
id = 2275
name = 'TikvConfig.raftstore.max-peer-down-duration-after-v5.2'
description = '副本允许的最长未响应时间，超过将被标记为 down，后续 PD 会尝试将其删掉。'
variation = 'TikvConfig.raftstore.max-peer-down-duration'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.max-peer-down-duration-after-v5.2"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.max-peer-down-duration")), "10m") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = '>=v5.2.0'
default = '10m'

[[rule]]
id = 2276
name = 'TikvConfig.raftstore.raft-log-gc-tick-interval'
description = '删除 raft 日志的轮询任务调度间隔时间，0 表示不启用。'
variation = 'TikvConfig.raftstore.raft-log-gc-tick-interval'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.raft-log-gc-tick-interval"
begin
    if MustCmpDuration(ToString(TikvConfig.GetValueByTagPath("raftstore.raft-log-gc-tick-interval")),"3s")==0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '3s'

[[rule]]
id = 2277
name = 'TikvConfig.raft-engine.enable'
description = '决定是否使用 Raft Engine 来存储 Raft 日志。开启该配置项后，raftdb 的配置不再生效。'
variation = 'TikvConfig.raft-engine.enable'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raft-engine.enable"
begin
   if ToBool(TikvConfig.GetValueByTagPath("raft-engine.enable")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = '>= v5.4.0'
default = 'false'

[[rule]]
id = 2278
name = 'TikvConfig.raftstore.snap-generator-pool-size'
description = '触发对 lock CF compact 检查的时间间隔。'
variation = 'TikvConfig.raftstore.snap-generator-pool-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TikvConfig.raftstore.snap-generator-pool-size"
begin

    if ToInt(TikvConfig.GetValueByTagPath("raftstore.snap-generator-pool-size")) == 2 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TikvConfig'
expect_res = ''
warn_level = 'info'
version = '>= v5.4.0'
default = 2

[[rule]]
id = 3001
name = 'TidbConfig.oom-action'
description = '当 TiDB 中单条 SQL 的内存使用超出 mem-quota-query 限制且不能再利用临时磁盘时的行为。'
variation = 'TidbConfig.oom-action'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.oom-action"
begin
    if ToString(TidbConfig.GetValueByTagPath("oom-action")) == "cancel" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'cancel'

[[rule]]
id = 3002
name = 'TidbConfig.lower-case-table-names'
description = '这个选项可以设置 TiDB 的系统变量 lower-case-table-names 的值,目前 TiDB 只支持将该选项的值设为 2，即按照大小写来保存表名，按照小写来比较（不区分大小写）。'
variation = 'TidbConfig.lower-case-table-names'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.lower-case-table-names"
begin
    if ToString(TidbConfig.GetValueByTagPath("lower-case-table-names")) == "2" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '2'

[[rule]]
id = 3005
name = 'TidbConfig.log.level'
description = '指定日志输出级别，可选项为 [debug,info,warn,error,fatal]'
variation = 'TidbConfig.log.level'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.log.level"
begin
    if ToString(TidbConfig.GetValueByTagPath("log.level")) == "info" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'info'

[[rule]]
id = 3006
name = 'TidbConfig.log.format'
description = '指定日志输出格式，可选项为 [json,text,console]'
variation = 'TidbConfig.log.format'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.log.format"
begin
    if ToString(TidbConfig.GetValueByTagPath("log.format")) == "text" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'text'

[[rule]]
id = 3015
name = 'TidbConfig.security.spilled-file-encryption-method'
description = '内存文件的加密方式'
variation = 'TidbConfig.security.spilled-file-encryption-method'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.security.spilled-file-encryption-method"
begin
    if ToString(TidbConfig.GetValueByTagPath("security.spilled-file-encryption-method")) == "plaintext" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'plaintext'

[[rule]]
id = 3016
name = 'TidbConfig.performance.force-priority'
description = '把所有的语句优先级设置为 force-priority 的值,可选值：NO_PRIORITY, LOW_PRIORITY, HIGH_PRIORITY, DELAYED。'
variation = 'TidbConfig.performance.force-priority'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.performance.force-priority"
begin
    if ToString(TidbConfig.GetValueByTagPath("performance.force-priority")) == "NO_PRIORITY" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'NO_PRIORITY'

[[rule]]
id = 3017
name = 'TidbConfig.binlog.binlog-socket'
description = 'binlog 输出网络地址。'
variation = 'TidbConfig.binlog.binlog-socket'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.binlog.binlog-socket"
begin
    if ToString(TidbConfig.GetValueByTagPath("binlog.binlog-socket")) == "" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '""'

[[rule]]
id = 3018
name = 'TidbConfig.binlog.strategy'
description = 'binlog 输出时选择 pump 的策略，仅支持 hash，range 方法。'
variation = 'TidbConfig.binlog.strategy'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.binlog.strategy"
begin
    if ToString(TidbConfig.GetValueByTagPath("binlog.strategy")) == "range" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'range'

[[rule]]
id = 3019
name = 'TidbConfig.security.require-secure-transport'
description = '是否要求客户端使用安全传输模式'
variation = 'TidbConfig.security.require-secure-transport'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.security.require-secure-transport"
begin
    if ToBool(TidbConfig.GetValueByTagPath("security.require-secure-transport")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 3020
name = 'TidbConfig.split-table'
description = '为每个 table 建立单独的 Region'
variation = 'TidbConfig.split-table'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.split-table"
begin
    if ToBool(TidbConfig.GetValueByTagPath("split-table")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 3021
name = 'TidbConfig.oom-use-tmp-storage'
description = '设置是否在单条 SQL 语句的内存使用超出 mem-quota-query 限制时为某些算子启用临时磁盘。'
variation = 'TidbConfig.oom-use-tmp-storage'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.oom-use-tmp-storage"
begin
    if ToBool(TidbConfig.GetValueByTagPath("oom-use-tmp-storage")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 3022
name = 'TidbConfig.compatible-kill-query'
description = '设置 KILL 语句的兼容性'
variation = 'TidbConfig.compatible-kill-query'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.compatible-kill-query"
begin
    if ToBool(TidbConfig.GetValueByTagPath("compatible-kill-query")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 3023
name = 'TidbConfig.check-mb4-value-in-utf8'
description = '开启检查 utf8mb4 字符的开关，如果开启此功能，字符集是 utf8，且在 utf8 插入 mb4 字符，系统将会报错。'
variation = 'TidbConfig.check-mb4-value-in-utf8'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.check-mb4-value-in-utf8"
begin
    if ToBool(TidbConfig.GetValueByTagPath("check-mb4-value-in-utf8")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 3024
name = 'TidbConfig.repair-mode'
description = '用于开启非可信修复模式，启动该模式后，可以过滤 repair-table-list 名单中坏表的加载。'
variation = 'TidbConfig.repair-mode'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.repair-mode"
begin
    if ToBool(TidbConfig.GetValueByTagPath("repair-mode")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 3025
name = 'TidbConfig.new_collations_enabled_on_first_bootstrap'
description = '用于开启新的 collation 支持'
variation = 'TidbConfig.new_collations_enabled_on_first_bootstrap'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.new_collations_enabled_on_first_bootstrap"
begin
    if ToBool(TidbConfig.GetValueByTagPath("new_collations_enabled_on_first_bootstrap")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 3026
name = 'TidbConfig.enable-telemetry'
description = '是否开启 TiDB 遥测功能'
variation = 'TidbConfig.enable-telemetry'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.enable-telemetry"
begin
    if ToBool(TidbConfig.GetValueByTagPath("enable-telemetry")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 3027
name = 'TidbConfig.enable-tcp4-only'
description = '控制是否只监听 TCP4。'
variation = 'TidbConfig.enable-tcp4-only'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.enable-tcp4-only"
begin
    if ToBool(TidbConfig.GetValueByTagPath("enable-tcp4-only")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 3028
name = 'TidbConfig.enable-enum-length-limit'
description = '是否限制单个 ENUM 元素和单个 SET 元素的最大长度'
variation = 'TidbConfig.enable-enum-length-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.enable-enum-length-limit"
begin
    if ToBool(TidbConfig.GetValueByTagPath("enable-enum-length-limit")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

#[[rule]]
#id = 3029
#name = 'TidbConfig.log.enable-timestamp'
#description = '是否在日志中输出时间戳'
#variation = 'TidbConfig.log.enable-timestamp'
#check_type = 'defaultConfig'
#execute_rule = '''
#rule "TidbConfig.log.enable-timestamp"
#begin
#    if ToBool(TidbConfig.GetValueByTagPath("log.enable-timestamp")) == true {
#        return true
#    } else {
#        return false
#    }
#end
#'''
#name_struct = 'TidbConfig'
#expect_res = ''
#warn_level = 'info'
#version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
#default = 'true'

[[rule]]
id = 3030
name = 'TidbConfig.log.enable-slow-log'
description = '是否开启慢查询日志'
variation = 'TidbConfig.log.enable-slow-log'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.log.enable-slow-log"
begin
    if ToBool(TidbConfig.GetValueByTagPath("log.enable-slow-log")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 3031
name = 'TidbConfig.log.record-plan-in-slow-log'
description = '在慢日志中记录执行计划,0 表示关闭，1 表示开启，默认开启，该值作为系统变量 tidb_record_plan_in_slow_log 的初始值。'
variation = 'TidbConfig.log.record-plan-in-slow-log'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.log.record-plan-in-slow-log"
begin
    if ToInt(TidbConfig.GetValueByTagPath("log.record-plan-in-slow-log")) == 1 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1'

[[rule]]
id = 3032
name = 'TidbConfig.security.auto-tls'
description = '控制 TiDB 启动时是否自动生成 TLS 证书。'
variation = 'TidbConfig.security.auto-tls'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.security.auto-tls"
begin
    if ToBool(TidbConfig.GetValueByTagPath("security.auto-tls")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 3033
name = 'TidbConfig.security.enable-sem'
description = '启用安全增强模式 (SEM)。'
variation = 'TidbConfig.security.enable-sem'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.security.enable-sem"
begin
    if ToBool(TidbConfig.GetValueByTagPath("security.enable-sem")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 3034
name = 'TidbConfig.performance.tcp-keep-alive'
description = 'TiDB 在 TCP 层开启 keepalive。'
variation = 'TidbConfig.performance.tcp-keep-alive'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.performance.tcp-keep-alive"
begin
    if ToBool(TidbConfig.GetValueByTagPath("performance.tcp-keep-alive")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 3035
name = 'TidbConfig.performance.tcp-no-delay'
description = '控制 TiDB 是否在 TCP 层开启 TCP_NODELAY。开启后，TiDB 将禁用 TCP/IP 协议中的 Nagle 算法，允许小数据包的发送，可以降低网络延时，适用于延时敏感型且数据传输量比较小的应用。'
variation = 'TidbConfig.performance.tcp-no-delay'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.performance.tcp-no-delay"
begin
    if ToBool(TidbConfig.GetValueByTagPath("performance.tcp-no-delay")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 3036
name = 'TidbConfig.performance.cross-join'
description = '默认可以执行在做 join 时两边表没有任何条件（where 字段）的语句；如果设置为 false，则有这样的 join 语句出现时，server 会拒绝执行'
variation = 'TidbConfig.performance.cross-join'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.performance.cross-join"
begin
    if ToBool(TidbConfig.GetValueByTagPath("performance.cross-join")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 3037
name = 'TidbConfig.performance.run-auto-analyze'
description = 'TiDB 是否做自动的 Analyze'
variation = 'TidbConfig.performance.run-auto-analyze'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.performance.run-auto-analyze"
begin
    if ToBool(TidbConfig.GetValueByTagPath("performance.run-auto-analyze")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 3038
name = 'TidbConfig.performance.distinct-agg-push-down'
description = '设置优化器是否执行将带有 Distinct 的聚合函数（比如 select count(distinct a) from t）下推到 Coprocessor 的优化操作。'
variation = 'TidbConfig.performance.distinct-agg-push-down'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.performance.distinct-agg-push-down"
begin
    if ToBool(TidbConfig.GetValueByTagPath("performance.distinct-agg-push-down")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 3039
name = 'TidbConfig.performance.enforce-mpp'
description = '用于控制是否忽略优化器代价估算，强制使用 TiFlash 的 MPP 模式执行查询.'
variation = 'TidbConfig.performance.enforce-mpp'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.performance.enforce-mpp"
begin
    if ToBool(TidbConfig.GetValueByTagPath("performance.enforce-mpp")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 3040
name = 'TidbConfig.prepared-plan-cache.enabled'
description = '开启 prepare 语句的 plan cache'
variation = 'TidbConfig.prepared-plan-cache.enabled'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.prepared-plan-cache.enabled"
begin
    if ToBool(TidbConfig.GetValueByTagPath("prepared-plan-cache.enabled")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'


[[rule]]
id = 3042
name = 'TidbConfig.binlog.enable'
description = 'binlog 开关'
variation = 'TidbConfig.binlog.enable'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.binlog.enable"
begin
    if ToBool(TidbConfig.GetValueByTagPath("binlog.enable")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 3043
name = 'TidbConfig.binlog.ignore-error'
description = '忽略写 binlog 发生的错误时处理开关，推荐不修改该值。'
variation = 'TidbConfig.binlog.ignore-error'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.binlog.ignore-error"
begin
    if ToBool(TidbConfig.GetValueByTagPath("binlog.ignore-error")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 3044
name = 'TidbConfig.status.report-status'
description = '开启 HTTP API 服务的开关。'
variation = 'TidbConfig.status.report-status'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.status.report-status"
begin
    if ToBool(TidbConfig.GetValueByTagPath("status.report-status")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'true'

[[rule]]
id = 3045
name = 'TidbConfig.status.record-db-qps'
description = '输与 database 相关的 QPS metrics 到 Prometheus 的开关。'
variation = 'TidbConfig.status.record-db-qps'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.status.record-db-qps"
begin
    if ToBool(TidbConfig.GetValueByTagPath("status.record-db-qps")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 3046
name = 'TidbConfig.pessimistic-txn.deadlock-history-collect-retryable'
description = '控制 INFORMATION_SCHEMA.DEADLOCKS 表中是否收集可重试的死锁错误信息。详见 DEADLOCKS 表文档的可重试的死锁错误小节。'
variation = 'TidbConfig.pessimistic-txn.deadlock-history-collect-retryable'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.pessimistic-txn.deadlock-history-collect-retryable"
begin
    if ToBool(TidbConfig.GetValueByTagPath("pessimistic-txn.deadlock-history-collect-retryable")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 3047
name = 'TidbConfig.experimental.allow-expression-index'
description = '用于控制是否能创建表达式索引。'
variation = 'TidbConfig.experimental.allow-expression-index'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.experimental.allow-expression-index"
begin
    if ToBool(TidbConfig.GetValueByTagPath("experimental.allow-expression-index")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = 'false'

[[rule]]
id = 3048
name = 'TidbConfig.token-limit'
description = '可以同时执行请求的 session 个数'
variation = 'TidbConfig.token-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.token-limit"
begin
    if ToString(TidbConfig.GetValueByTagPath("token-limit")) == "1000" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1000'

[[rule]]
id = 3049
name = 'TidbConfig.mem-quota-query'
description = '单条 SQL 语句可以占用的最大内存阈值，单位为字节。'
variation = 'TidbConfig.mem-quota-query'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.mem-quota-query"
begin
    if ToString(TidbConfig.GetValueByTagPath("mem-quota-query")) == "1073741824" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1073741824'

[[rule]]
id = 3050
name = 'TidbConfig.tmp-storage-quota'
description = 'tmp-storage-path 存储使用的限额，当单条 SQL 语句使用临时磁盘，导致 TiDB server 的总体临时磁盘总量超过 tmp-storage-quota 时，当前 SQL 操作会被取消，并返回 Out Of Global Storage Quota! 错误。 当 tmp-storage-quota 小于 0 时则没有上述检查与限制。'
variation = 'TidbConfig.tmp-storage-quota'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.tmp-storage-quota"
begin
    if ToString(TidbConfig.GetValueByTagPath("tmp-storage-quota")) == "-1" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '-1'

[[rule]]
id = 3051
name = 'TidbConfig.lease'
description = 'DDL 租约超时时间'
variation = 'TidbConfig.lease'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.lease"
begin
    if MustCmpDuration(ToString(TidbConfig.GetValueByTagPath("lease")), "45s") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '45s'

[[rule]]
id = 3052
name = 'TidbConfig.max-server-connections'
description = 'TiDB 中同时允许的最大客户端连接数，用于资源控制。'
variation = 'TidbConfig.max-server-connections'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.max-server-connections"
begin
    if ToString(TidbConfig.GetValueByTagPath("max-server-connections")) == "0" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0'

[[rule]]
id = 3053
name = 'TidbConfig.max-index-length'
description = '用于设置新建索引的长度限制，单位 Byte'
variation = 'TidbConfig.max-index-length'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.max-index-length"
begin
    if ToString(TidbConfig.GetValueByTagPath("max-index-length")) == "3072" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '3072'

[[rule]]
id = 3054
name = 'TidbConfig.table-column-count-limit'
description = '用于设置单个表中列的数量限制'
variation = 'TidbConfig.table-column-count-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.table-column-count-limit"
begin
    if ToString(TidbConfig.GetValueByTagPath("table-column-count-limit")) == "1017" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1017'

[[rule]]
id = 3055
name = 'TidbConfig.index-limit'
description = '用于设置单个表中索引的数量限制'
variation = 'TidbConfig.index-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.index-limit"
begin
    if ToString(TidbConfig.GetValueByTagPath("index-limit")) == "64" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '64'

#TODO
[[rule]]
id = 3056
name = 'TidbConfig.graceful-wait-before-shutdown'
description = '指定关闭服务器时 TiDB 等待的秒数，使得客户端有时间断开连接。'
variation = 'TidbConfig.graceful-wait-before-shutdown'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.graceful-wait-before-shutdown"
begin
    if ToString(TidbConfig.GetValueByTagPath("graceful-wait-before-shutdown")) == "0" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0'

[[rule]]
id = 3057
name = 'TidbConfig.log.slow-threshold'
description = '输出慢日志的耗时阈值'
variation = 'TidbConfig.log.slow-threshold'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.log.slow-threshold"
begin
    if ToInt(TidbConfig.GetValueByTagPath("log.slow-threshold")) == 300 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '300ms'

[[rule]]
id = 3058
name = 'TidbConfig.log.expensive-threshold'
description = '输出 expensive 操作的行数阈值'
variation = 'TidbConfig.log.expensive-threshold'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.log.expensive-threshold"
begin
    if ToString(TidbConfig.GetValueByTagPath("log.expensive-threshold")) == "10000" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10000'

[[rule]]
id = 3059
name = 'TidbConfig.log.query-log-max-len'
description = '最长的 SQL 输出长度'
variation = 'TidbConfig.log.query-log-max-len'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.log.query-log-max-len"
begin
    if ToString(TidbConfig.GetValueByTagPath("log.query-log-max-len")) == "4096" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '4096'

[[rule]]
id = 3060
name = 'TidbConfig.log.file.max-size'
description = '日志文件的大小限制'
variation = 'TidbConfig.log.file.max-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.log.file.max-size"
begin
    if ToInt(TidbConfig.GetValueByTagPath("log.file.max-size")) == 300 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '300MB'

[[rule]]
id = 3061
name = 'TidbConfig.log.file.max-days'
description = '日志最大的保留天数'
variation = 'TidbConfig.log.file.max-days'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.log.file.max-days"
begin
    if ToString(TidbConfig.GetValueByTagPath("log.file.max-days")) == "0" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0'

[[rule]]
id = 3062
name = 'TidbConfig.log.file.max-backups'
description = '保留的日志的最大数量'
variation = 'TidbConfig.log.file.max-backups'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.log.file.max-backups"
begin
    if ToString(TidbConfig.GetValueByTagPath("log.file.max-backups")) == "0" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0'

[[rule]]
id = 3063
name = 'TidbConfig.performance.max-procs'
description = 'TiDB 的 CPU 使用数量，0 表示会使用所有 CPU'
variation = 'TidbConfig.performance.max-procs'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.performance.max-procs"
begin
    if ToString(TidbConfig.GetValueByTagPath("performance.max-procs")) == "0" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0'

[[rule]]
id = 3064
name = 'TidbConfig.performance.server-memory-quota'
description = 'tidb-server 实例内存的使用限制，单位为字节。该配置完全取代原有的 max-memory'
variation = 'TidbConfig.performance.server-memory-quota'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.performance.server-memory-quota"
begin
    if ToString(TidbConfig.GetValueByTagPath("performance.server-memory-quota")) == "0" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0'

[[rule]]
id = 3065
name = 'TidbConfig.performance.memory-usage-alarm-ratio'
description = 'tidb-server 实例内存使用占总内存的比例超过一定阈值时会报警。该配置项的有效范围为 0 到 1。如果配置该选项为 0 或 1，则表示关闭内存阈值报警功能。'
variation = 'TidbConfig.performance.memory-usage-alarm-ratio'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.performance.memory-usage-alarm-ratio"
begin
    if ToString(TidbConfig.GetValueByTagPath("performance.memory-usage-alarm-ratio")) == "0.8" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0.8'

[[rule]]
id = 3066
name = 'TidbConfig.performance.txn-entry-size-limit'
description = 'TiDB 单行数据的大小限制,单位为 Byte'
variation = 'TidbConfig.performance.txn-entry-size-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.performance.txn-entry-size-limit"
begin
    if ToString(TidbConfig.GetValueByTagPath("performance.txn-entry-size-limit")) == "6291456" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '6291456'

[[rule]]
id = 3067
name = 'TidbConfig.performance.txn-total-size-limit'
description = 'TiDB 单个事物的大小限制'
variation = 'TidbConfig.performance.txn-total-size-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.performance.txn-total-size-limit"
begin
    if ToString(TidbConfig.GetValueByTagPath("performance.txn-total-size-limit")) == "104857600" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '104857600'

[[rule]]
id = 3068
name = 'TidbConfig.performance.max-txn-ttl'
description = '单个事务持锁的最长时间 ms，超过该时间，该事务的锁可能会被其他事务清除，导致该事务无法成功提交。'
variation = 'TidbConfig.performance.max-txn-ttl'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.performance.max-txn-ttl"
begin
    if ToString(TidbConfig.GetValueByTagPath("performance.max-txn-ttl")) == "3600000" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '3600000'

[[rule]]
id = 3069
name = 'TidbConfig.performance.committer-concurrency'
description = '在单个事务的提交阶段，用于执行提交操作相关请求的 goroutine 数量'
variation = 'TidbConfig.performance.committer-concurrency'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.performance.committer-concurrency"
begin
    if ToString(TidbConfig.GetValueByTagPath("performance.committer-concurrency")) == "128" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '128'

[[rule]]
id = 3070
name = 'TidbConfig.performance.stmt-count-limit'
description = 'TiDB 单个事务允许的最大语句条数限制。'
variation = 'TidbConfig.performance.stmt-count-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.performance.stmt-count-limit"
begin
    if ToString(TidbConfig.GetValueByTagPath("performance.stmt-count-limit")) == "5000" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '5000'

[[rule]]
id = 3071
name = 'TidbConfig.performance.stats-lease'
description = 'TiDB 重载统计信息，更新表行数，检查是否需要自动 analyze，利用 feedback 更新统计信息以及加载列的统计信息的时间间隔。'
variation = 'TidbConfig.performance.stats-lease'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.performance.stats-lease"
begin
    if MustCmpDuration(ToString(TidbConfig.GetValueByTagPath("performance.stats-lease")), "3s") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '3s'

[[rule]]
id = 3072
name = 'TidbConfig.performance.feedback-probability'
description = 'TiDB 对查询收集统计信息反馈的概率,此功能默认关闭，暂不建议开启。如果开启此功能，对于每一个查询，TiDB 会以 feedback-probability 的概率收集查询的反馈，用于更新统计信息。'
variation = 'TidbConfig.performance.feedback-probability'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.performance.feedback-probability"
begin
    if ToString(TidbConfig.GetValueByTagPath("performance.feedback-probability")) == "0" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0'

[[rule]]
id = 3073
name = 'TidbConfig.performance.query-feedback-limit-before-v5.0'
description = '在内存中缓存的最大 Query Feedback 数量，超过这个数量的 Feedback 会被丢弃。'
variation = 'TidbConfig.performance.query-feedback-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.performance.query-feedback-limit-before-v5.0"
begin
    if ToString(TidbConfig.GetValueByTagPath("performance.query-feedback-limit")) == "1024" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15'
default = '1024'

[[rule]]
id = 3074
name = 'TidbConfig.performance.pseudo-estimate-ratio'
description = '修改过的行数/表的总行数的比值，超过该值时系统会认为统计信息已经过期，会采用 pseudo 的统计信息。'
variation = 'TidbConfig.performance.pseudo-estimate-ratio'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.performance.pseudo-estimate-ratio"
begin
    if ToString(TidbConfig.GetValueByTagPath("performance.pseudo-estimate-ratio")) == "0.8" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0.8'

[[rule]]
id = 3075
name = 'TidbConfig.nested-loop-join-cache-capacity'
description = 'nested loop join cache LRU 使用的最大内存限制。可以占用的最大内存阈值，单位 Byte'
variation = 'TidbConfig.nested-loop-join-cache-capacity'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.nested-loop-join-cache-capacity"
begin
    if ToString(TidbConfig.GetValueByTagPath("nested-loop-join-cache-capacity")) == "20971520" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15'
default = '20971520'

[[rule]]
id = 3076
name = 'TidbConfig.prepared-plan-cache.capacity'
description = '缓存语句的数量'
variation = 'TidbConfig.prepared-plan-cache.capacity'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.prepared-plan-cache.capacity"
begin
    if ToString(TidbConfig.GetValueByTagPath("prepared-plan-cache.capacity")) == "100" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '100'

[[rule]]
id = 3077
name = 'TidbConfig.prepared-plan-cache.memory-guard-ratio'
description = '用于防止超过 performance.max-memory, 超过 max-memory * (1 - prepared-plan-cache.memory-guard-ratio) 会剔除 LRU 中的元素。'
variation = 'TidbConfig.prepared-plan-cache.memory-guard-ratio'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.prepared-plan-cache.memory-guard-ratio"
begin
    if ToString(TidbConfig.GetValueByTagPath("prepared-plan-cache.memory-guard-ratio")) == "0.1" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0.1'

[[rule]]
id = 3078
name = 'TidbConfig.tikv-client.grpc-connection-count'
description = '跟每个 TiKV 之间监理的最大连接数'
variation = 'TidbConfig.tikv-client.grpc-connection-count'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.tikv-client.grpc-connection-count"
begin
    if ToString(TidbConfig.GetValueByTagPath("tikv-client.grpc-connection-count")) == "4" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '4'

[[rule]]
id = 3079
name = 'TidbConfig.tikv-client.grpc-keepalive-time'
description = 'TiDB 与 TiKV 节点之间 rpc 连接 keepalive 时间间隔，如果超过该值没有网络包，grpc client 会 ping 一下 TiKV 查看是否存活。'
variation = 'TidbConfig.tikv-client.grpc-keepalive-time'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.tikv-client.grpc-keepalive-time"
begin
    if ToInt(TidbConfig.GetValueByTagPath("tikv-client.grpc-keepalive-time")) == 10 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10s'

[[rule]]
id = 3080
name = 'TidbConfig.tikv-client.grpc-keepalive-timeout'
description = 'TiDB 与 TiKV 节点 rpc keepalive 检查的超时时间'
variation = 'TidbConfig.tikv-client.grpc-keepalive-timeout'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.tikv-client.grpc-keepalive-timeout"
begin
    if ToInt(TidbConfig.GetValueByTagPath("tikv-client.grpc-keepalive-timeout")) == 3{
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '3s'

[[rule]]
id = 3081
name = 'TidbConfig.tikv-client.commit-timeout'
description = '执行事务提交时，最大的超过时间'
variation = 'TidbConfig.tikv-client.commit-timeout'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.tikv-client.commit-timeout"
begin
    if MustCmpDuration(ToString(TidbConfig.GetValueByTagPath("tikv-client.commit-timeout")), "41s") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '41s'

[[rule]]
id = 3082
name = 'TidbConfig.tikv-client.max-batch-size'
description = '批量发送 rpc 封包的最大数量，如果不为 0，将使用 BatchCommands api 发送请求到 TiKV，可以在并发度高的情况降低 rpc 的延迟，推荐不修改该值。'
variation = 'TidbConfig.tikv-client.max-batch-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.tikv-client.max-batch-size"
begin
    if ToString(TidbConfig.GetValueByTagPath("tikv-client.max-batch-size")) == "128" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '128'

[[rule]]
id = 3083
name = 'TidbConfig.tikv-client.max-batch-wait-time'
description = '等待 max-batch-wait-time 纳秒批量将此期间的数据包封装成一个大包发送给 TiKV 节点，仅在 tikv-client.max-batch-size 值大于 0 时有效，不推荐修改该值。单位 纳秒'
variation = 'TidbConfig.tikv-client.max-batch-wait-time'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.tikv-client.max-batch-wait-time"
begin
    if ToString(TidbConfig.GetValueByTagPath("tikv-client.max-batch-wait-time")) == "0" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '0'

[[rule]]
id = 3084
name = 'TidbConfig.tikv-client.batch-wait-size'
description = '批量向 TiKV 发送的封包最大数量，不推荐修改该值。'
variation = 'TidbConfig.tikv-client.batch-wait-size'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.tikv-client.batch-wait-size"
begin
    if ToString(TidbConfig.GetValueByTagPath("tikv-client.batch-wait-size")) == "8" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '8'

[[rule]]
id = 3085
name = 'TidbConfig.tikv-client.overload-threshold'
description = 'TiKV 的负载阈值，如果超过此阈值，会收集更多的 batch 封包，来减轻 TiKV 的压力。仅在 tikv-client.max-batch-size 值大于 0 时有效，不推荐修改该值。'
variation = 'TidbConfig.tikv-client.overload-threshold'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.tikv-client.overload-threshold"
begin
    if ToString(TidbConfig.GetValueByTagPath("tikv-client.overload-threshold")) == "200" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '200'

#TODO
[[rule]]
id = 3086
name = 'TidbConfig.tikv-client.copr-cache.capacity-mb'
description = '缓存的总数据量大小。当缓存空间满时，旧缓存条目将被逐出。值为 0.0 时表示关闭 Coprocessor Cache。'
variation = 'TidbConfig.tikv-client.copr-cache.capacity-mb'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.tikv-client.copr-cache.capacity-mb"
begin
    if ToFloat(TidbConfig.GetValueByTagPath("tikv-client.copr-cache.capacity-mb")) == 1000 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '1000.0'

[[rule]]
id = 3088
name = 'TidbConfig.binlog.write-timeout'
description = '写 binlog 的超时时间，推荐不修改该值。'
variation = 'TidbConfig.binlog.write-timeout'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.binlog.write-timeout"
begin
    if MustCmpDuration(ToString(TidbConfig.GetValueByTagPath("binlog.write-timeout")), "15s") == 0 {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '15s'

[[rule]]
id = 3089
name = 'TidbConfig.stmt-summary.max-stmt-count'
description = 'events_statement_summary_by_digest 表中保存的 SQL 种类的最大数量。'
variation = 'TidbConfig.stmt-summary.max-stmt-count'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.stmt-summary.max-stmt-count"
begin
    if ToString(TidbConfig.GetValueByTagPath("stmt-summary.max-stmt-count")) == "3000" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.14||v4.0.15||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '3000'

[[rule]]
id = 3090
name = 'TidbConfig.stmt-summary.max-sql-length'
description = 'events_statement_summary_by_digest 表中 DIGEST_TEXT 和 QUERY_SAMPLE_TEXT 列的最大显示长度。'
variation = 'TidbConfig.stmt-summary.max-sql-length'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.stmt-summary.max-sql-length"
begin
    if ToString(TidbConfig.GetValueByTagPath("stmt-summary.max-sql-length")) == "4096" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '4096'

[[rule]]
id = 3091
name = 'TidbConfig.pessimistic-txn.max-retry-count'
description = '悲观事务中单个语句最大重试次数，重试次数超过该限制，语句执行将会报错。'
variation = 'TidbConfig.pessimistic-txn.max-retry-count'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.pessimistic-txn.max-retry-count"
begin
    if ToString(TidbConfig.GetValueByTagPath("pessimistic-txn.max-retry-count")) == "256" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15||v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '256'

[[rule]]
id = 3092
name = 'TidbConfig.pessimistic-txn.deadlock-history-capacity'
description = '单个 TiDB 节点的 INFORMATION_SCHEMA.DEADLOCKS 表最多可记录的死锁事件个数。当表的容量已满时，如果再次发生死锁错误，最早的一次死锁错误的信息将从表中移除。'
variation = 'TidbConfig.pessimistic-txn.deadlock-history-capacity'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.pessimistic-txn.deadlock-history-capacity"
begin
    if ToString(TidbConfig.GetValueByTagPath("pessimistic-txn.deadlock-history-capacity")) == "10" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '10'

[[rule]]
id = 3093
name = 'TidbConfig.tikv-client.copr-cache.enable'
description = '是否开启下推计算结果缓存。'
variation = 'TidbConfig.tikv-client.copr-cache.enable'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.tikv-client.copr-cache.enable"
begin
    if ToBool(TidbConfig.GetValueByTagPath("tikv-client.copr-cache.enable")) == false {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15'
default = 'false'

#TODO
[[rule]]
id = 3094
name = 'TidbConfig.tikv-client.copr-cache.admission-max-result-mb'
description = '指定能被缓存的最大单个下推计算结果集。若单个下推计算在 Coprocessor 上返回的结果集小于该参数指定的大小，则结果集会被缓存。调大该值可以缓存更多种类下推请求，但也将导致缓存空间更容易被占满。注意，每个下推计算结果集大小一般都会小于 Region 大小，因此将该值设置得远超过 Region 大小没有意义。'
variation = 'TidbConfig.tikv-client.copr-cache.admission-max-result-mb'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.tikv-client.copr-cache.admission-max-result-mb"
begin
    if ToString(TidbConfig.GetValueByTagPath("tikv-client.copr-cache.admission-max-result-mb")) == "10.0" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15'
default = '10.0'

[[rule]]
id = 3095
name = 'TidbConfig.tikv-client.copr-cache.admission-min-process-ms'
description = '指定能被缓存的单个下推计算结果集的最短计算时间。若单个下推计算在 Coprocessor 上的计算时间小于该参数指定的时间，则结果集不会被缓存。处理得很快的请求没有必要进行缓存，仅对处理时间很长的请求进行缓存，减少缓存被逐出的概率，这是本配置参数的意义。'
variation = 'TidbConfig.tikv-client.copr-cache.admission-min-process-ms'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.tikv-client.copr-cache.admission-min-process-ms"
begin
    if ToString(TidbConfig.GetValueByTagPath("tikv-client.copr-cache.admission-min-process-ms")) == "5" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15'
default = '5'

[[rule]]
id = 3096
name = 'TidbConfig.tikv-client.copr-cache.admission-max-ranges'
description = '指定能被缓存的单个下推计算结果集的最大范围数量。如果下推计算存在的范围数量超过该配置项指定的数量，则结果集不会被缓存。一般认为当范围数量过多时，解析范围是计算的主要开销，这样 Coprocessor Cache 带来的额外计算开销会较大。'
variation = 'TidbConfig.tikv-client.copr-cache.admission-max-ranges'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.tikv-client.copr-cache.admission-max-ranges"
begin
    if ToString(TidbConfig.GetValueByTagPath("tikv-client.copr-cache.admission-max-ranges")) == "500" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15'
default = '500'

[[rule]]
id = 3097
name = 'TidbConfig.pessimistic-txn.enable'
description = '开启悲观事务支持，悲观事务使用方法请参考 TiDB 悲观事务模式。'
variation = 'TidbConfig.pessimistic-txn.enable'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.pessimistic-txn.enable"
begin
    if ToBool(TidbConfig.GetValueByTagPath("pessimistic-txn.enable")) == true {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v4.0.0||v4.0.1||v4.0.2||v4.0.3||v4.0.4||v4.0.5||v4.0.6||v4.0.7||v4.0.8||v4.0.9||v4.0.10||v4.0.11||v4.0.12||v4.0.13||v4.0.14||v4.0.15'
default = 'true'

[[rule]]
id = 3098
name = 'TidbConfig.performance.query-feedback-limit-after-v5.0'
description = '在内存中缓存的最大 Query Feedback 数量，超过这个数量的 Feedback 会被丢弃。'
variation = 'TidbConfig.performance.query-feedback-limit'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.performance.query-feedback-limit-after-v5.0"
begin
    if ToString(TidbConfig.GetValueByTagPath("performance.query-feedback-limit")) == "512" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.0.0||v5.0.1||v5.0.2||v5.0.3||v5.0.4||v5.1.0||v5.1.1||v5.1.2||v5.2.0||v5.2.1||v5.2.2||>= v5.3.0'
default = '512'

[[rule]]
id = 3099
name = 'TidbConfig.prepared-plan-cache.capacity'
description = '缓存语句的数量'
variation = 'TidbConfig.prepared-plan-cache.capacity'
check_type = 'defaultConfig'
execute_rule = '''
rule "TidbConfig.prepared-plan-cache.capacity"
begin
    if ToString(TidbConfig.GetValueByTagPath("prepared-plan-cache.capacity")) == "1000" {
        return true
    } else {
        return false
    }
end
'''
name_struct = 'TidbConfig'
expect_res = ''
warn_level = 'info'
version = 'v5.3.0'
default = '1000'